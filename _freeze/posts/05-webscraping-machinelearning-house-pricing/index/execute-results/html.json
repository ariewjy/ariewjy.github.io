{
  "hash": "1984859b06872e47531b795c15f5115a",
  "result": {
    "markdown": "---\ntitle: ' Malaysia Property Pricing - Webscraping & Machine Learning Model'\ndescription: |\n  Full details on creating property dataset using webscraping, and building machine learning model to predict the rent price\ntitle-block-banner: true\ndate: '2023-02-10'\ncategories:\n  - project\n  - data-science\n  - python\n  - webscraping\ncode-fold: show\ndraft: false\ncitation-location: document\nbibliography: references.bib\n---\n\n## Machine Learning Project\n\nPacmann Batch 8 Capstone by Aditya Arie Wijaya (aditya-66kK)\n\n### Introduction\n\nThis is a machine learning project to predict unit/property monthly rent price in Kuala Lumpur region, Malaysia. The project uses a dataset from an online ads listing for property [mudah.my](https://www.mudah.my/). This project outlines the process of web-scraping/ data gathering, data cleaning-wrangling, and machine learning modeling.\n\nThis project aims to answers question about how much a unit monthly rent would be if given information such as location, number of bedrooms, parking, furnished, etc? This would help potential tenant and also the owner to get the best price of their rental unit, comparable to the market value.\n\nSome previous work about house pricing was listed below, however most of them are targeting a dataset of house pricing or an Airbnb pricing. There are difference such as in Airbnb, the booking rarely took more than 2 weeks, let alone a year. Therefore the pricing may be different. Additionally, in Airbnb, there is text feature coming from the review given by the tenant and the owner.The better the review, the higher the rent prices -- which was not available in this current project dataset.\n\nPrevious work by [@madhuri2019], [@xu2022], [@zhao2022] highlight the importance feature selection, and the choice of machine learning model. Based on the previous works, the most consistently performed machine learning model are Random Forest and Gradient boosting, and the MAE and R2 score usually used in evaluating the performance of the model. Although the above work are all not about apartment rent pricing, similar method can be applied to this project.\n\n### Data Gathering\n\nThe data will use a scraped data from the website mentioned before, focusing on property-to-rent surrounding Kuala Lumpur, Malaysia. ![Website](mudah_my.png)\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n#importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\npd.set_option('max_colwidth', 200)\nfrom bs4 import BeautifulSoup as bs\nimport requests\nimport re\nimport time\nimport datetime\nimport smtplib\nimport json\nfrom tqdm.notebook import tqdm, trange\nimport time    # to be used in loop iterations\n\n!jupyter nbextension enable --py widgetsnbextension #enabling progress bar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnabling notebook extension jupyter-js-widgets/extension...\r\n      - Validating: problems found:\r\n        - require?  X jupyter-js-widgets/extension\r\n```\n:::\n:::\n\n\n#### Web-Scraping Process\n\nThe process started out by gathering data from the website. We are using python library for web-scraping: BeautifulSoup as depicted below. \nThe first process is generating a list of webpage address for a given page number.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n#generate list address of n_page\ndef page_number(start, end):\n    \"\"\"\n    Description:\n        Function to generate a list of webpage address for a given page number\n\n    Parameters:\n        start (int) : starting page number\n        end (int)   : ending page number\n    Returns:\n        a list of listing web address \n    \n    \"\"\"\n    \n    page_url = 'https://www.mudah.my/kuala-lumpur/apartment-condominium-for-rent?o='\n    list_page = []\n    for i in range(start,end+1):\n        list_page.append(page_url+str(i))\n    return list_page\npage_number(2,4)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n['https://www.mudah.my/kuala-lumpur/apartment-condominium-for-rent?o=2',\n 'https://www.mudah.my/kuala-lumpur/apartment-condominium-for-rent?o=3',\n 'https://www.mudah.my/kuala-lumpur/apartment-condominium-for-rent?o=4']\n```\n:::\n:::\n\n\nThen generate a list of ads listing on a single page.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#setting up list of page from \ndef get_list_html(page_url):\n    \"\"\"\n    Description:\n        Function to get every listing ads in a given url (page_url)\n\n    Parameters:\n        page_url (str): website url\n        \n    Returns:\n        a list of listing ads\n    \n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\"}\n    page = requests.get(url=page_url, headers=headers)\n    soup = bs(page.text, \"html.parser\")\n\n    script_tag = soup.find('script', type='application/ld+json')\n    data = json.loads(script_tag.text)\n    dict_query = data[2]['itemListElement']\n\n    n_query = data[2]['numberOfItems']\n    list_html = []\n\n    for i in range(n_query):\n        link = data[2]['itemListElement'][i]['item']['url']\n        list_html.append(link)\n        \n    return list_html\n\n\n#getting listing property from the 1st-5th in the list\nget_list_html('https://www.mudah.my/neighbouring-kuala-lumpur/apartment-for-rent?o=2')[0:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['https://www.mudah.my/Fully+Furnished+Duplex+in+Third+Avenue-100443909.htm',\n 'https://www.mudah.my/Mac+2023+Intake-100443804.htm',\n 'https://www.mudah.my/Tingkat+1+Fiona+Apartment+Taman+Samudera+Batu+Cave+Gombak-100443750.htm',\n 'https://www.mudah.my/Cheras+Apartment+near+AeonBig+C180+Aeon+Balakong-92813710.htm',\n 'https://www.mudah.my/New+Apartment+platinum+Residence+Dengkil+selangor-99443172.htm']\n```\n:::\n:::\n\n\nCombining the previous two functions, generate a list of url for all pages.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#generate listing property from each page of n_page\ndef get_list_url(n_page):\n    \"\"\"\n    Description:\n        Function to get every listing ads in every page (n_page)\n\n    Parameters:\n        n_page (int): number of page\n        \n    Returns:\n        a list of listing ads\n    \n    \"\"\"\n    list_html=[]\n    for i in tqdm(range(n_page)):\n        list_html.extend(get_list_html(page_number(1, n_page)[i]))\n    return list_html\n\nget_list_url(2)[:10]\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"41fd5b7727364771a0af3da13ac869d7\",\"version_major\":2,\"version_minor\":0}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n['https://www.mudah.my/Pv12+For+Rent+Setapak+Danau+Kota+for+rent-100356119.htm',\n 'https://www.mudah.my/SAVIO+Riana+Dutamas+2+bedrooms+Fully+Furnish+for+couple+family-100445048.htm',\n 'https://www.mudah.my/Inspirasi+Mont+Kiara+3R2B+2+parking+Fully+Furnished+Nice+View-100445047.htm',\n 'https://www.mudah.my/Apartment+Endah+Ria+Sri+Petaling+Fully+Furnished+Taman+Sri+Endah-99479115.htm',\n 'https://www.mudah.my/Court+28+3+Room+5mins+to+Sentul+West+MRT+LRT+Fully+Furnished-100445010.htm',\n 'https://www.mudah.my/Best+for+stay-100444994.htm',\n 'https://www.mudah.my/PV9+Setapak+New+Condo-100444981.htm',\n 'https://www.mudah.my/Nice+apartment+unit+for+rent+-99026399.htm',\n 'https://www.mudah.my/Bukit+Pandan+Condominium+2+Pandan+Perdana+Cheras+KL-99906090.htm',\n 'https://www.mudah.my/Majestic+Maxim+Alam+Damai+MRT+Connaught+Leisure+Mall+EcoCheras+Mall-100444908.htm']\n```\n:::\n:::\n\n\nThen extract the attributes inside the listing ads in a form of nested dictionary.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n#extract data from url\ndef get_list_dict(n_page):\n    \"\"\"\n    Description:\n        Function to get dataset (atribut of units) in a form of dictionary. \n\n    Parameters:\n        n_page (int): number of page\n        \n    Returns:\n        a dictionaries of attributes inside a list\n    \n    \"\"\"\n    headers = {\"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\"}\n    list_html = get_list_url(n_page)\n    list_dict = []\n    for url in tqdm(list_html):\n        try:\n            page = requests.get(url=url, headers=headers)\n            soup1 = bs(page.text, \"html.parser\")\n            soup2 = bs(soup1.prettify(), 'html.parser')\n\n            id_html = re.search(r'(\\d+).htm', url).group(1)\n            title = soup2.find(itemprop='name').text.strip()\n\n            script_tag = soup2.find(\"script\", id=\"__NEXT_DATA__\")\n            script_content = script_tag.text\n            data = json.loads(script_content)\n            props = data.get(\"props\", {})\n            id_listing = re.search(r'-(\\d+)\\.htm', url).group(1)\n\n            dict_id = [{'realValue': '', 'id': 'ads_id', 'value': id_listing, 'label': 'id ads'}]\n            dict_building = props[\"initialState\"][\"adDetails\"][\"byID\"][id_listing][\"attributes\"]['propertyParams'][2]['params']\n            dict_prop = props[\"initialState\"][\"adDetails\"][\"byID\"][id_listing][\"attributes\"]['categoryParams']\n            dict_unit = dict_id + dict_building + dict_prop\n        except:\n            None\n        \n        list_dict.append(dict_unit)\n        \n    return list_dict\n\n#sanity check\nget_list_dict(1)[1]\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"c592be0d774342fb811649282dc05388\",\"version_major\":2,\"version_minor\":0}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"9d47e99a41c5465a817c6e9d488a854b\",\"version_major\":2,\"version_minor\":0}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[{'realValue': '', 'id': 'ads_id', 'value': '100445048', 'label': 'id ads'},\n {'realValue': 'Riana Dutamas',\n  'id': 'prop_name',\n  'value': 'Riana Dutamas',\n  'label': 'Building Name'},\n {'realValue': 'IJM Land Berhad',\n  'id': 'developer_name',\n  'value': 'IJM Land Berhad',\n  'label': 'Developer'},\n {'realValue': 'Jalan Segambut, Segambut, Kuala Lumpur',\n  'id': 'address',\n  'value': 'Jalan Segambut, Segambut, Kuala Lumpur',\n  'label': 'Address'},\n {'realValue': '',\n  'id': 'completion_year',\n  'value': '',\n  'label': 'Completion Year'},\n {'realValue': '', 'id': 'num_floors', 'value': '', 'label': '# of Floors'},\n {'realValue': '', 'id': 'num_units', 'value': '', 'label': 'Total Units'},\n {'realValue': 'RM 1 900 per month',\n  'id': 'monthly_rent',\n  'value': 'RM 1 900 per month',\n  'label': 'Monthly Rent'},\n {'realValue': '2020',\n  'id': 'category_id',\n  'value': 'Apartment / Condominium, For rent',\n  'label': 'Category'},\n {'realValue': '9',\n  'id': 'location',\n  'value': 'Kuala Lumpur - Segambut',\n  'label': 'Location'},\n {'realValue': '5',\n  'id': 'property_type',\n  'value': 'Service Residence',\n  'label': 'Property Type'},\n {'realValue': '3',\n  'id': 'floor_range',\n  'value': 'Low',\n  'label': 'Floor Range'},\n {'realValue': '2', 'id': 'rooms', 'value': '2', 'label': 'Bedrooms'},\n {'realValue': '2', 'id': 'bathroom', 'value': '2', 'label': 'Bathroom'},\n {'realValue': '800', 'id': 'size', 'value': '800 sq.ft.', 'label': 'Size'},\n {'realValue': '1',\n  'id': 'furnished',\n  'value': 'Fully Furnished',\n  'label': 'Furnished'},\n {'realValue': '13,9,12,1,7,2,16,15,14',\n  'id': 'facilities',\n  'value': 'Parking, Security, Lift, Swimming Pool, Playground, Gymnasium, Multipurpose hall, Barbeque area, Sauna',\n  'label': 'Facilities'},\n {'realValue': '2', 'id': 'parking', 'value': '2', 'label': 'Carpark'},\n {'realValue': '1,2,4,3',\n  'id': 'additional_facilities',\n  'value': 'Air-Cond, Cooking Allowed, Washing Machine, Near KTM/LRT',\n  'label': 'Other Facilities'},\n {'realValue': 'e', 'id': 'firm_type', 'value': 'E', 'label': 'Firm Type'},\n {'realValue': '11307',\n  'id': 'estate_agent',\n  'value': '11307',\n  'label': 'Firm Number'}]\n```\n:::\n:::\n\n\nExtracting the values inside the dictionary for each attributes.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n#getting values out of dictionary\ndef get_values(list_dict):\n    \"\"\"\n    Description:\n        Function to values of the previous dictionary.\n\n    Parameters:\n        list_dict (list): list of dictionary where attributes stored\n        \n    Returns:\n        a list of values (unit/property) attributes\n    \n    \"\"\"\n    keys = [\n        'ads_id',\n        'prop_name',\n        # 'developer_name', \n        # 'address', \n        'completion_year', \n        # 'num_floors', \n        # 'num_units',\n        'monthly_rent', \n        # 'category_id', \n        'location', \n        'property_type', \n        # 'floor_range', \n        'rooms', \n        'parking',\n        'bathroom', \n        'size', \n        'furnished',\n        'facilities', \n        'additional_facilities', \n       ]\n\n    values = {}\n    for key in keys:\n        try:\n            values[key] = next(item['value'] for item in list_dict if item[\"id\"] == key)\n        except StopIteration:\n            values[key] = None\n    return values\n\n#sanity check\nget_values(get_list_dict(1)[1])\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"b6075f55b7df4b2fbc90a9a2579ace64\",\"version_major\":2,\"version_minor\":0}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"c3cde3c1a0d542feacde3e81c37aad79\",\"version_major\":2,\"version_minor\":0}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n{'ads_id': '100445048',\n 'prop_name': 'Riana Dutamas',\n 'completion_year': '',\n 'monthly_rent': 'RM 1 900 per month',\n 'location': 'Kuala Lumpur - Segambut',\n 'property_type': 'Service Residence',\n 'rooms': '2',\n 'parking': '2',\n 'bathroom': '2',\n 'size': '800 sq.ft.',\n 'furnished': 'Fully Furnished',\n 'facilities': 'Parking, Security, Lift, Swimming Pool, Playground, Gymnasium, Multipurpose hall, Barbeque area, Sauna',\n 'additional_facilities': 'Air-Cond, Cooking Allowed, Washing Machine, Near KTM/LRT'}\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n#get df from list\ndef get_df_final(n_page):\n    \"\"\"\n    Description:\n        Function to generate dataframe from the list.\n\n    Parameters:\n        n_page (int): number of page\n        \n    Returns:\n        a dataframe of the list of attributes on each listings.\n    \n    \"\"\"\n    list_data = get_list_dict(n_page)\n    list_new = []\n    for i in range(0,len(list_data)):\n            dic = get_values(list_data[i])\n            list_new.append(dic)\n    \n    df = pd.DataFrame(list_new)\n    return df\n```\n:::\n\n\nOf course we won't scrape 250 pages at first, let's extract 1 page only:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n#sanity check\nget_df_final(1).head(2).T\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"2c14060e74654cb38a15f2634c4e2bfa\",\"version_major\":2,\"version_minor\":0}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<script type=\"application/vnd.jupyter.widget-view+json\">\n{\"model_id\":\"fdee88b03feb46dbbec476b4a570b702\",\"version_major\":2,\"version_minor\":0}\n</script>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ads_id</th>\n      <td>100356119</td>\n      <td>100445048</td>\n    </tr>\n    <tr>\n      <th>prop_name</th>\n      <td>Platinum Lake PV 12</td>\n      <td>Riana Dutamas</td>\n    </tr>\n    <tr>\n      <th>completion_year</th>\n      <td>2008</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>monthly_rent</th>\n      <td>RM 1 700 per month</td>\n      <td>RM 1 900 per month</td>\n    </tr>\n    <tr>\n      <th>location</th>\n      <td>Kuala Lumpur - Setapak</td>\n      <td>Kuala Lumpur - Segambut</td>\n    </tr>\n    <tr>\n      <th>property_type</th>\n      <td>Condominium</td>\n      <td>Service Residence</td>\n    </tr>\n    <tr>\n      <th>rooms</th>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>parking</th>\n      <td>None</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>bathroom</th>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>size</th>\n      <td>1207 sq.ft.</td>\n      <td>800 sq.ft.</td>\n    </tr>\n    <tr>\n      <th>furnished</th>\n      <td>Partially Furnished</td>\n      <td>Fully Furnished</td>\n    </tr>\n    <tr>\n      <th>facilities</th>\n      <td>Swimming Pool, Gymnasium, Security, Minimart, Playground, Parking, Lift, Multipurpose hall, Jogging Track</td>\n      <td>Parking, Security, Lift, Swimming Pool, Playground, Gymnasium, Multipurpose hall, Barbeque area, Sauna</td>\n    </tr>\n    <tr>\n      <th>additional_facilities</th>\n      <td>Cooking Allowed, Washing Machine, Internet</td>\n      <td>Air-Cond, Cooking Allowed, Washing Machine, Near KTM/LRT</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFinally, let's extract dataset from 250 pages. File is then saved into a csv, to be reloaded again.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# df_=get_df_final(250)\n# df_.to_csv('mudah-apartment-raw.csv', index=False)\n## already run, and file is saved\n```\n:::\n\n\n------------------------------------------------------------------------\n\n### Data Understanding\n\nReload the original dataset. \n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n#read it back\ndf = pd.read_csv('./mudah-apartment-raw.csv')\ndf.head(3).T\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ads_id</th>\n      <td>100323185</td>\n      <td>100203973</td>\n      <td>100323128</td>\n    </tr>\n    <tr>\n      <th>prop_name</th>\n      <td>The Hipster @ Taman Desa</td>\n      <td>Segar Courts</td>\n      <td>Pangsapuri Teratak Muhibbah 2</td>\n    </tr>\n    <tr>\n      <th>completion_year</th>\n      <td>2022.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>monthly_rent</th>\n      <td>RM 4 200 per month</td>\n      <td>RM 2 300 per month</td>\n      <td>RM 1 000 per month</td>\n    </tr>\n    <tr>\n      <th>location</th>\n      <td>Kuala Lumpur - Taman Desa</td>\n      <td>Kuala Lumpur - Cheras</td>\n      <td>Kuala Lumpur - Taman Desa</td>\n    </tr>\n    <tr>\n      <th>property_type</th>\n      <td>Condominium</td>\n      <td>Condominium</td>\n      <td>Apartment</td>\n    </tr>\n    <tr>\n      <th>rooms</th>\n      <td>5</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>parking</th>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>bathroom</th>\n      <td>6.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>size</th>\n      <td>1842 sq.ft.</td>\n      <td>1170 sq.ft.</td>\n      <td>650 sq.ft.</td>\n    </tr>\n    <tr>\n      <th>furnished</th>\n      <td>Fully Furnished</td>\n      <td>Partially Furnished</td>\n      <td>Fully Furnished</td>\n    </tr>\n    <tr>\n      <th>facilities</th>\n      <td>Minimart, Gymnasium, Security, Playground, Swimming Pool, Parking, Lift, Barbeque area, Multipurpose hall, Jogging Track</td>\n      <td>Playground, Parking, Barbeque area, Security, Jogging Track, Swimming Pool, Gymnasium, Lift, Sauna</td>\n      <td>Minimart, Jogging Track, Lift, Swimming Pool</td>\n    </tr>\n    <tr>\n      <th>additional_facilities</th>\n      <td>Air-Cond, Cooking Allowed, Washing Machine</td>\n      <td>Air-Cond, Cooking Allowed, Near KTM/LRT</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Data Description\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 13 columns):\n #   Column                 Non-Null Count  Dtype  \n---  ------                 --------------  -----  \n 0   ads_id                 10000 non-null  int64  \n 1   prop_name              9492 non-null   object \n 2   completion_year        5623 non-null   float64\n 3   monthly_rent           10000 non-null  object \n 4   location               10000 non-null  object \n 5   property_type          10000 non-null  object \n 6   rooms                  9998 non-null   object \n 7   parking                7368 non-null   float64\n 8   bathroom               9998 non-null   float64\n 9   size                   10000 non-null  object \n 10  furnished              9999 non-null   object \n 11  facilities             9104 non-null   object \n 12  additional_facilities  7167 non-null   object \ndtypes: float64(3), int64(1), object(9)\nmemory usage: 1015.8+ KB\n```\n:::\n:::\n\n\nThe following feature is available in the dataset:\n\n-   `ads_id`: ads listing ID, unique to each ads\n-   `prop_name`: the building name of the property\n-   `completion_year`: year of the building/property completed\n-   `monthly_rent`: monthly rent price in Malaysian Ringgit (RM)\n-   `location`: the location (region) of the property\n-   `property_type`: property type, such as flat, apartment, etc\n-   `rooms`: number of rooms\n-   `parking`: number of parking spot\n-   `bathroom`: number of bathroom\n-   `size`: total area of the unit in sq.ft\n-   `furnished`: furnishin status of the unit, fully-partial-non\n-   `facilities`: main facilities within the unit\n-   `additional_facilities`: additional facilities\n\n#### Drop Duplicate\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n#cek duplikat\ndf.duplicated().sum()\n\n#drop duplikat\ndf1 = df.drop_duplicates()\n```\n:::\n\n\nSaving the file to csv after remove duplicated values.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# #saving to csv\n# df1.to_csv(\"mudah-apartment-clean.csv\", index=False)\n# #saved already\n```\n:::\n\n\nReload the data after drop duplicates\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n#reload the data\ndf = pd.read_csv(\"./mudah-apartment-clean.csv\")\n```\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n#sanity check\ndf.duplicated().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n0\n```\n:::\n:::\n\n\n#### Extracting Number and Keyword\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n#removing RM from monthly rent\ndf['monthly_rent'] = df['monthly_rent'].apply(lambda x: int(re.search(r'RM (.*?) per', x).group(1).replace(' ', '')))\ndf = df.rename(columns={'monthly_rent': 'monthly_rent_rm'})\n\n#dropping sq.ft from size\ndf['size'] = df['size'].apply(lambda x: int(re.search(r'(.*?) sq', x).group(1).replace(' ', '')))\ndf = df.rename(columns={'size': 'size_sqft'})\n\n#dropping kuala lumpur from the location\ndf['location'] = df['location'].apply(lambda x: re.findall(\"\\w+$\", x)[0])\ndf.head(4).T\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ads_id</th>\n      <td>100323185</td>\n      <td>100203973</td>\n      <td>100323128</td>\n      <td>100191767</td>\n    </tr>\n    <tr>\n      <th>prop_name</th>\n      <td>The Hipster @ Taman Desa</td>\n      <td>Segar Courts</td>\n      <td>Pangsapuri Teratak Muhibbah 2</td>\n      <td>Sentul Point Suite Apartment</td>\n    </tr>\n    <tr>\n      <th>completion_year</th>\n      <td>2022.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>monthly_rent_rm</th>\n      <td>4200</td>\n      <td>2300</td>\n      <td>1000</td>\n      <td>1700</td>\n    </tr>\n    <tr>\n      <th>location</th>\n      <td>Desa</td>\n      <td>Cheras</td>\n      <td>Desa</td>\n      <td>Sentul</td>\n    </tr>\n    <tr>\n      <th>property_type</th>\n      <td>Condominium</td>\n      <td>Condominium</td>\n      <td>Apartment</td>\n      <td>Apartment</td>\n    </tr>\n    <tr>\n      <th>rooms</th>\n      <td>5</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>parking</th>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>bathroom</th>\n      <td>6.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>size_sqft</th>\n      <td>1842</td>\n      <td>1170</td>\n      <td>650</td>\n      <td>743</td>\n    </tr>\n    <tr>\n      <th>furnished</th>\n      <td>Fully Furnished</td>\n      <td>Partially Furnished</td>\n      <td>Fully Furnished</td>\n      <td>Partially Furnished</td>\n    </tr>\n    <tr>\n      <th>facilities</th>\n      <td>Minimart, Gymnasium, Security, Playground, Swimming Pool, Parking, Lift, Barbeque area, Multipurpose hall, Jogging Track</td>\n      <td>Playground, Parking, Barbeque area, Security, Jogging Track, Swimming Pool, Gymnasium, Lift, Sauna</td>\n      <td>Minimart, Jogging Track, Lift, Swimming Pool</td>\n      <td>Parking, Playground, Swimming Pool, Squash Court, Security, Minimart, Gymnasium, Lift</td>\n    </tr>\n    <tr>\n      <th>additional_facilities</th>\n      <td>Air-Cond, Cooking Allowed, Washing Machine</td>\n      <td>Air-Cond, Cooking Allowed, Near KTM/LRT</td>\n      <td>NaN</td>\n      <td>Cooking Allowed, Near KTM/LRT, Washing Machine</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Extracting Near KTM/LRT\n\nHypotheses: closer access to KTM/LRT = higher monthly rent\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n#extracting near KTM/LRT from the additional facilities\ndef extract_near_ktm_lrt(text):\n    pattern = re.compile(r'\\bNear KTM/LRT\\b')\n    try:\n        match = pattern.search(text)\n        if match:\n            return 'yes'\n        return 'no'\n    except TypeError:\n        return text\n```\n:::\n\n\nExtracting \"near KTM/LRT\" into its own column.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf['nearby_railways'] = df.additional_facilities.apply(lambda x: extract_near_ktm_lrt(x))\ndf.head(4).T\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ads_id</th>\n      <td>100323185</td>\n      <td>100203973</td>\n      <td>100323128</td>\n      <td>100191767</td>\n    </tr>\n    <tr>\n      <th>prop_name</th>\n      <td>The Hipster @ Taman Desa</td>\n      <td>Segar Courts</td>\n      <td>Pangsapuri Teratak Muhibbah 2</td>\n      <td>Sentul Point Suite Apartment</td>\n    </tr>\n    <tr>\n      <th>completion_year</th>\n      <td>2022.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2020.0</td>\n    </tr>\n    <tr>\n      <th>monthly_rent_rm</th>\n      <td>4200</td>\n      <td>2300</td>\n      <td>1000</td>\n      <td>1700</td>\n    </tr>\n    <tr>\n      <th>location</th>\n      <td>Desa</td>\n      <td>Cheras</td>\n      <td>Desa</td>\n      <td>Sentul</td>\n    </tr>\n    <tr>\n      <th>property_type</th>\n      <td>Condominium</td>\n      <td>Condominium</td>\n      <td>Apartment</td>\n      <td>Apartment</td>\n    </tr>\n    <tr>\n      <th>rooms</th>\n      <td>5</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>parking</th>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>bathroom</th>\n      <td>6.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>size_sqft</th>\n      <td>1842</td>\n      <td>1170</td>\n      <td>650</td>\n      <td>743</td>\n    </tr>\n    <tr>\n      <th>furnished</th>\n      <td>Fully Furnished</td>\n      <td>Partially Furnished</td>\n      <td>Fully Furnished</td>\n      <td>Partially Furnished</td>\n    </tr>\n    <tr>\n      <th>facilities</th>\n      <td>Minimart, Gymnasium, Security, Playground, Swimming Pool, Parking, Lift, Barbeque area, Multipurpose hall, Jogging Track</td>\n      <td>Playground, Parking, Barbeque area, Security, Jogging Track, Swimming Pool, Gymnasium, Lift, Sauna</td>\n      <td>Minimart, Jogging Track, Lift, Swimming Pool</td>\n      <td>Parking, Playground, Swimming Pool, Squash Court, Security, Minimart, Gymnasium, Lift</td>\n    </tr>\n    <tr>\n      <th>additional_facilities</th>\n      <td>Air-Cond, Cooking Allowed, Washing Machine</td>\n      <td>Air-Cond, Cooking Allowed, Near KTM/LRT</td>\n      <td>NaN</td>\n      <td>Cooking Allowed, Near KTM/LRT, Washing Machine</td>\n    </tr>\n    <tr>\n      <th>nearby_railways</th>\n      <td>no</td>\n      <td>yes</td>\n      <td>NaN</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPlotting the difference between nearby KTM/LRT or not:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsns.boxplot(data=df, x='monthly_rent_rm', y='nearby_railways')\nplt.xlim(0,4000);\n\nnear_ktmlrt = df.query(\" nearby_railways == 'yes' \")\nnot_near_ktmlrt = df.query(\" nearby_railways == 'no' \")\n\nprint(f\"\"\" \nMedian:\nNearby KTM/LRT: {near_ktmlrt.monthly_rent_rm.median():.0f}RM\nNot nearby KTM/LRT: {not_near_ktmlrt.monthly_rent_rm.median():.0f}RM\n      \"\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n \nMedian:\nNearby KTM/LRT: 1650RM\nNot nearby KTM/LRT: 1600RM\n      \n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Boxplot between Nearby KTM/LRT or Not](index_files/figure-html/fig-nearbyktm-output-2.png){#fig-nearbyktm width=608 height=429}\n:::\n:::\n\n\nSanity check:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf[df['prop_name'] == 'Majestic Maxim'][['nearby_railways']].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nnearby_railways\nyes                166\nno                  24\ndtype: int64\n```\n:::\n:::\n\n\nAs seen above, @fig-nearbyktm shows that it sligthly increases the median monthly rent by 50RM. However, near KTM/LRT is not appearing in all row even though the property is the same\n\n**Conclusion: Near KTM/LRT may be used, but it can be improved as the listing is inconsistent**\n\n#### Drop Missing Values in Facilities and Additional Facilities\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nads_id                      0\nprop_name                 508\ncompletion_year          4373\nmonthly_rent_rm             0\nlocation                    0\nproperty_type               0\nrooms                       2\nparking                  2630\nbathroom                    2\nsize_sqft                   0\nfurnished                   1\nfacilities                895\nadditional_facilities    2831\nnearby_railways          2831\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n#dropping some columns\ndf = df.drop(columns=[\n    'ads_id', \n    'prop_name', \n    'facilities', \n    'additional_facilities',\n    # 'nearby_railways',\n    # 'completion_year'\n])\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>monthly_rent_rm</th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022.0</td>\n      <td>4200</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>1842</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>2300</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1170</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>1000</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>650</td>\n      <td>Fully Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020.0</td>\n      <td>1700</td>\n      <td>Sentul</td>\n      <td>Apartment</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>743</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>1299</td>\n      <td>Kiara</td>\n      <td>Service Residence</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>494</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9986</th>\n      <td>2017.0</td>\n      <td>1400</td>\n      <td>Sentul</td>\n      <td>Service Residence</td>\n      <td>3</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>900</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9987</th>\n      <td>1998.0</td>\n      <td>1000</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>657</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9988</th>\n      <td>2021.0</td>\n      <td>1488</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1000</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9989</th>\n      <td>1988.0</td>\n      <td>2000</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>3</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1200</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9990</th>\n      <td>NaN</td>\n      <td>2000</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1010</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>9991 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n#checking dtypes from all columns\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 9991 entries, 0 to 9990\nData columns (total 10 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   completion_year  5618 non-null   float64\n 1   monthly_rent_rm  9991 non-null   int64  \n 2   location         9991 non-null   object \n 3   property_type    9991 non-null   object \n 4   rooms            9989 non-null   object \n 5   parking          7361 non-null   float64\n 6   bathroom         9989 non-null   float64\n 7   size_sqft        9991 non-null   int64  \n 8   furnished        9990 non-null   object \n 9   nearby_railways  7160 non-null   object \ndtypes: float64(3), int64(2), object(5)\nmemory usage: 780.7+ KB\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n#converting rooms from object to int64\ndf['rooms'] = pd.to_numeric(df['rooms'], downcast='integer', errors='coerce')\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 9991 entries, 0 to 9990\nData columns (total 10 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   completion_year  5618 non-null   float64\n 1   monthly_rent_rm  9991 non-null   int64  \n 2   location         9991 non-null   object \n 3   property_type    9991 non-null   object \n 4   rooms            9987 non-null   float64\n 5   parking          7361 non-null   float64\n 6   bathroom         9989 non-null   float64\n 7   size_sqft        9991 non-null   int64  \n 8   furnished        9990 non-null   object \n 9   nearby_railways  7160 non-null   object \ndtypes: float64(4), int64(2), object(4)\nmemory usage: 780.7+ KB\n```\n:::\n:::\n\n\n#### Outlier Removal\n\nTo remove some unexplainable data such as 0 monthly rent, 0 size, the rent that is way too old (1970), including the monthly rent that is way too high and/or size too big. \n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndf[['size_sqft', 'monthly_rent_rm']].plot(kind='scatter', x='size_sqft', y='monthly_rent_rm');\nplt.ylim(100,5500) #batas harga rent\nplt.xlim(50,3000)  #batas size\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Monthly Rent](index_files/figure-html/fig-size-rent-output-1.png){#fig-size-rent width=619 height=429}\n:::\n:::\n\n\n##### Monthly Rent\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nfig, axs = plt.subplots(1,2)\naxs[0].boxplot(data=df, x='monthly_rent_rm')\naxs[0].set_ylim(0,20000)\naxs[0].set_title('all data')\n\naxs[1].boxplot(data=df, x='monthly_rent_rm')\naxs[1].set_ylim(0,5000)\naxs[1].set_title('croped at 5,000 RM')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Comparison between Different Scale](index_files/figure-html/fig-compare-rent-output-1.png){#fig-compare-rent width=662 height=469}\n:::\n:::\n\n\nBased on EDA on @fig-size-rent and @fig-compare-rent, author decided to filter the data between 100-5500 RM as follows:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n#removing all rows with monthly rent above 5500 RM and below 100RM\ndfx = df.query(\" monthly_rent_rm > 100 & monthly_rent_rm < 5500 \")\ndfx.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>monthly_rent_rm</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5530.000000</td>\n      <td>9841.000000</td>\n      <td>9838.000000</td>\n      <td>7245.000000</td>\n      <td>9840.000000</td>\n      <td>9.841000e+03</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2014.863110</td>\n      <td>1786.840260</td>\n      <td>2.742427</td>\n      <td>1.339268</td>\n      <td>1.928760</td>\n      <td>1.111279e+04</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.436904</td>\n      <td>768.813626</td>\n      <td>0.763700</td>\n      <td>0.517512</td>\n      <td>0.517118</td>\n      <td>1.008037e+06</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1980.000000</td>\n      <td>110.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000e+00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2011.000000</td>\n      <td>1300.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>8.000000e+02</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2017.000000</td>\n      <td>1600.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>2.000000</td>\n      <td>9.080000e+02</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2020.000000</td>\n      <td>2100.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>1.087000e+03</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2025.000000</td>\n      <td>5300.000000</td>\n      <td>9.000000</td>\n      <td>10.000000</td>\n      <td>6.000000</td>\n      <td>1.000000e+08</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSanity check after removal as shown in @fig-rent-final belo:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndfx.monthly_rent_rm.plot(kind='box', x='monthly_rent_rm');\n```\n\n::: {.cell-output .cell-output-display}\n![Data after Outlier Removal](index_files/figure-html/fig-rent-final-output-1.png){#fig-rent-final width=583 height=411}\n:::\n:::\n\n\n#### Size\n\nChecking the dataset in terms of size.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nfig, axs = plt.subplots(1,2)\naxs[0].boxplot(data=dfx, x='size_sqft')\naxs[0].set_ylim(0,20000)\naxs[0].set_title('all data')\n\naxs[1].boxplot(data=dfx, x='size_sqft')\naxs[1].set_ylim(0,2000)\naxs[1].set_title('croped at 0-2,000 square feet')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Raw Data Size sq.ft](index_files/figure-html/fig-size-comparison-output-1.png){#fig-size-comparison width=662 height=469}\n:::\n:::\n\n\nStill based on @fig-size-rent, outliers are removed.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n#removing outliers below 500, and higher than 3000 sqft and below 50 sqft\ndfx = \\\n(dfx.query(\" size_sqft > 50 & size_sqft < 3000 \")\n # .size_sqft\n # .plot(kind='box')\n)\ndfx\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>monthly_rent_rm</th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022.0</td>\n      <td>4200</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>1842</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>2300</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1170</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>1000</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>650</td>\n      <td>Fully Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020.0</td>\n      <td>1700</td>\n      <td>Sentul</td>\n      <td>Apartment</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>743</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>1299</td>\n      <td>Kiara</td>\n      <td>Service Residence</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>494</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9986</th>\n      <td>2017.0</td>\n      <td>1400</td>\n      <td>Sentul</td>\n      <td>Service Residence</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>900</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9987</th>\n      <td>1998.0</td>\n      <td>1000</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>657</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9988</th>\n      <td>2021.0</td>\n      <td>1488</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1000</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9989</th>\n      <td>1988.0</td>\n      <td>2000</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1200</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9990</th>\n      <td>NaN</td>\n      <td>2000</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1010</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>9822 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\nSanity check:\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndfx.size_sqft.plot(kind='box');\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-32-output-1.png){width=583 height=413}\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nfig, axs = plt.subplots(1,5, figsize=(12,4))\naxs[0].boxplot(data=dfx.dropna(), x='size_sqft')\naxs[1].boxplot(data=dfx.dropna(), x='rooms')\naxs[2].boxplot(data=dfx.dropna(), x='parking')\naxs[3].boxplot(data=dfx.dropna(), x='bathroom')\n# axs[4].boxplot(data=dfx.dropna(), x='completion_year')\n\naxs[0].set_title('Size')\naxs[1].set_title('Rooms')\naxs[2].set_title('Parking')\naxs[3].set_title('Bathrooms')\n# axs[4].set_title('Completion Year')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Final Data after Outlier Removal](index_files/figure-html/fig-complete-outliers-output-1.png){#fig-complete-outliers width=1147 height=373}\n:::\n:::\n\n\n### Data Preprocessing\n\n#### Input-Output\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndef extractInputOutput(data,\n                       output_column_name):\n    \"\"\"\n    Fungsi untuk memisahkan data input dan output\n    :param data: <pandas dataframe> data seluruh sample\n    :param output_column_name: <string> nama kolom output\n    :return input_data: <pandas dataframe> data input\n    :return output_data: <pandas series> data output\n    \"\"\"\n    output_data = data[output_column_name]\n    input_data = data.drop(output_column_name,\n                           axis = 1)\n    \n    return input_data, output_data\n```\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nX, y = extractInputOutput(data=dfx, output_column_name='monthly_rent_rm')\n```\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nX\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022.0</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>1842</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1170</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>650</td>\n      <td>Fully Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020.0</td>\n      <td>Sentul</td>\n      <td>Apartment</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>743</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>Kiara</td>\n      <td>Service Residence</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>494</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9986</th>\n      <td>2017.0</td>\n      <td>Sentul</td>\n      <td>Service Residence</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>900</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9987</th>\n      <td>1998.0</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>657</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9988</th>\n      <td>2021.0</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1000</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9989</th>\n      <td>1988.0</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1200</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9990</th>\n      <td>NaN</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1010</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>9822 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n0       4200\n1       2300\n2       1000\n3       1700\n4       1299\n        ... \n9986    1400\n9987    1000\n9988    1488\n9989    2000\n9990    2000\nName: monthly_rent_rm, Length: 9822, dtype: int64\n```\n:::\n:::\n\n\n#### Train-Test Split Data\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n#import libraries\nfrom sklearn.model_selection import train_test_split\n```\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    test_size = 0.2,\n                                                    random_state = 123)\n```\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n#sanity check\nlen(X_test)/len(X)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n0.20006108735491754\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n#sanity check\nX_train\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5978</th>\n      <td>2020.0</td>\n      <td>Sentul</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>876</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>2151</th>\n      <td>2022.0</td>\n      <td>Setapak</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>850</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9714</th>\n      <td>2002.0</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>1000</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>8556</th>\n      <td>2021.0</td>\n      <td>Cheras</td>\n      <td>Service Residence</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>680</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>2809</th>\n      <td>2005.0</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>920</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9954</th>\n      <td>2016.0</td>\n      <td>Besi</td>\n      <td>Service Residence</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1121</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>7901</th>\n      <td>NaN</td>\n      <td>Jalil</td>\n      <td>Flat</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>650</td>\n      <td>Not Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>5322</th>\n      <td>2013.0</td>\n      <td>Kepong</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1378</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1363</th>\n      <td>NaN</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>950</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3648</th>\n      <td>2019.0</td>\n      <td>KLCC</td>\n      <td>Service Residence</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>796</td>\n      <td>Fully Furnished</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>7857 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n**Preprocessing Original Data for Categorical Dtypes**\n\nOne must paying attention to the number of categorical observation in the original data, with respect to the sampling train-test value. If, the test_size = 0.3, that means any categorical observation with a total of 3 and less, would not be distributed evenly among train and test data.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nprint(dfx.location.nunique())\nprint(X_train.location.nunique())\nprint(X_test.location.nunique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n53\n53\n50\n```\n:::\n:::\n\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nprint(dfx.property_type.nunique())\nprint(X_train.property_type.nunique())\nprint(X_test.property_type.nunique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n9\n8\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nprint(set(X_train.furnished.to_list()) - set(X_test.furnished.to_list()))\nprint(set(X_train.location.to_list()) - set(X_test.location.to_list()))\nprint(set(X_train.property_type.to_list()) - set(X_test.property_type.to_list()))\nprint(set(X_train.nearby_railways.to_list()) - set(X_test.nearby_railways.to_list()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset()\n{'Sentral', 'Lin', 'Penchala'}\n{'Condo / Services residence / Penthouse / Townhouse'}\nset()\n```\n:::\n:::\n\n\n> Dropping Data\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ndfx\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>monthly_rent_rm</th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022.0</td>\n      <td>4200</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>6.0</td>\n      <td>1842</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>2300</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1170</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>1000</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>650</td>\n      <td>Fully Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2020.0</td>\n      <td>1700</td>\n      <td>Sentul</td>\n      <td>Apartment</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>743</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>1299</td>\n      <td>Kiara</td>\n      <td>Service Residence</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>494</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9986</th>\n      <td>2017.0</td>\n      <td>1400</td>\n      <td>Sentul</td>\n      <td>Service Residence</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>900</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9987</th>\n      <td>1998.0</td>\n      <td>1000</td>\n      <td>Desa</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>657</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9988</th>\n      <td>2021.0</td>\n      <td>1488</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1000</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9989</th>\n      <td>1988.0</td>\n      <td>2000</td>\n      <td>Desa</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1200</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9990</th>\n      <td>NaN</td>\n      <td>2000</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1010</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>9822 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ndfx.location.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\nCheras         1614\nSetapak         965\nSentul          776\nKepong          662\nJalil           577\nMaju            456\nAmpang          327\nKeramat         300\nRoad            298\nDesa            295\nCity            268\nKiara           264\nKLCC            239\nIpoh            224\nLama            193\nSegambut        178\nPetaling        174\nPandan          173\nBesi            173\nKuching         168\nSouth           143\nPantai          113\nBintang          99\nMelawati         91\nTitiwangsa       83\nHilir            78\nHartamas         75\nDamansara        73\nOUG              63\nIsmail           59\nDutamas          57\nGombak           56\nPerdana          53\nSetiawangsa      50\nParkCity         50\nBangsar          47\nMenjalara        45\nSeputeh          35\nPuchong          33\nIndah            29\nCentre           25\nJaya             24\nBrickfields      24\nPudu             24\nSelatan          19\nHeights          18\nJinjang           9\nSerdang           9\nSentral           5\nOthers            5\nTunku             2\nPenchala          1\nLin               1\nName: location, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\ndfx.property_type.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\nCondominium                                           4698\nService Residence                                     2647\nApartment                                             2123\nFlat                                                   265\nStudio                                                  27\nDuplex                                                  27\nOthers                                                  27\nTownhouse Condo                                          7\nCondo / Services residence / Penthouse / Townhouse       1\nName: property_type, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\ndfx_new = dfx[\n    (dfx.location != 'Jinjang') \n    & (dfx.location != 'Serdang') & \n    (dfx.location != 'Sentral') & \n    (dfx.location != 'Others') & \n    (dfx.location != 'Tunku') & \n    (dfx.location != 'Penchala') & \n    (dfx.location != 'Lin') &\n    # (dfx.property_type != 'Others') &\n    (dfx.property_type != 'Condo / Services residence / Penthouse / Townhouse') &\n    (dfx.property_type != 'Townhouse Condo')\n]\n```\n:::\n\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\ndfx_new.property_type.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\nCondominium          4683\nService Residence    2642\nApartment            2115\nFlat                  263\nDuplex                 27\nStudio                 26\nOthers                 26\nName: property_type, dtype: int64\n```\n:::\n:::\n\n\n> Re-split Training-Test\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\nX, y = extractInputOutput(data=dfx_new, output_column_name='monthly_rent_rm')\n```\n:::\n\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\n#import libraries\nfrom sklearn.model_selection import train_test_split\n```\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    test_size = 0.2,\n                                                    random_state = 123)\n```\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\n#sanity check\nlen(X_test)/len(X)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n0.2000613371498671\n```\n:::\n:::\n\n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\nX_train\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8649</th>\n      <td>NaN</td>\n      <td>Maju</td>\n      <td>Condominium</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>800</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9112</th>\n      <td>1993.0</td>\n      <td>Bangsar</td>\n      <td>Condominium</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>890</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>1472</th>\n      <td>NaN</td>\n      <td>Jalil</td>\n      <td>Condominium</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1200</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>5536</th>\n      <td>NaN</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>893</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>8152</th>\n      <td>NaN</td>\n      <td>Pudu</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>980</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7541</th>\n      <td>2001.0</td>\n      <td>Ampang</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>828</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7927</th>\n      <td>NaN</td>\n      <td>South</td>\n      <td>Flat</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>750</td>\n      <td>Not Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5340</th>\n      <td>2023.0</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1000</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>1369</th>\n      <td>NaN</td>\n      <td>KLCC</td>\n      <td>Condominium</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>473</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>3659</th>\n      <td>2017.0</td>\n      <td>Road</td>\n      <td>Service Residence</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>953</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>7825 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\nprint(set(X_train.furnished.to_list()) - set(X_test.furnished.to_list()))\nprint(set(X_train.location.to_list()) - set(X_test.location.to_list()))\nprint(set(X_train.property_type.to_list()) - set(X_test.property_type.to_list()))\n# print(set(X_train.nearby_railways.to_list()) - set(X_test.nearby_railways.to_list()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nset()\nset()\nset()\n```\n:::\n:::\n\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nprint(dfx_new.location.nunique())\nprint(X_train.location.nunique())\nprint(X_test.location.nunique())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n46\n46\n46\n```\n:::\n:::\n\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\n#sanity check\nX_train\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8649</th>\n      <td>NaN</td>\n      <td>Maju</td>\n      <td>Condominium</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>800</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9112</th>\n      <td>1993.0</td>\n      <td>Bangsar</td>\n      <td>Condominium</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>890</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>1472</th>\n      <td>NaN</td>\n      <td>Jalil</td>\n      <td>Condominium</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1200</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>5536</th>\n      <td>NaN</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>893</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>8152</th>\n      <td>NaN</td>\n      <td>Pudu</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>980</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7541</th>\n      <td>2001.0</td>\n      <td>Ampang</td>\n      <td>Apartment</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>828</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7927</th>\n      <td>NaN</td>\n      <td>South</td>\n      <td>Flat</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>750</td>\n      <td>Not Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5340</th>\n      <td>2023.0</td>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1000</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>1369</th>\n      <td>NaN</td>\n      <td>KLCC</td>\n      <td>Condominium</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>473</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>3659</th>\n      <td>2017.0</td>\n      <td>Road</td>\n      <td>Service Residence</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>953</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>7825 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\n#export data training\nX_train.to_csv('X_train.csv', index=False)\ny_train.to_csv('y_train.csv', index=False)\n```\n:::\n\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\n#export data testing\nX_test.to_csv('X_test.csv', index=False)\ny_test.to_csv('y_test.csv', index=False)\n```\n:::\n\n\n### Training Data Imputation\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\n#checking null data\nX_train.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\ncompletion_year    3438\nlocation              0\nproperty_type         0\nrooms                 2\nparking            2074\nbathroom              0\nsize_sqft             0\nfurnished             0\nnearby_railways    2206\ndtype: int64\n```\n:::\n:::\n\n\n#### Numerical Data\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nX_train_num =  X_train.select_dtypes(exclude='object')\nX_train_num\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8649</th>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>800</td>\n    </tr>\n    <tr>\n      <th>9112</th>\n      <td>1993.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>890</td>\n    </tr>\n    <tr>\n      <th>1472</th>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>1200</td>\n    </tr>\n    <tr>\n      <th>5536</th>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>893</td>\n    </tr>\n    <tr>\n      <th>8152</th>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>980</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7541</th>\n      <td>2001.0</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>828</td>\n    </tr>\n    <tr>\n      <th>7927</th>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>750</td>\n    </tr>\n    <tr>\n      <th>5340</th>\n      <td>2023.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>1000</td>\n    </tr>\n    <tr>\n      <th>1369</th>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>3659</th>\n      <td>2017.0</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>953</td>\n    </tr>\n  </tbody>\n</table>\n<p>7825 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\nX_train_num.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\ncompletion_year    3438\nrooms                 2\nparking            2074\nbathroom              0\nsize_sqft             0\ndtype: int64\n```\n:::\n:::\n\n\n-   We can fill completion year, rooms, parking and bathroom with mode\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\nfrom sklearn.impute import SimpleImputer\n\ndef numericalImputation(X_train_num, strategy = 'most_frequent'):\n    \"\"\"\n    Fungsi untuk melakukan imputasi data numerik NaN\n    :param data: <pandas dataframe> sample data input\n\n    :return X_train_numerical: <pandas dataframe> data numerik\n    :return imputer_numerical: numerical imputer method\n    \"\"\"\n    #buat imputer\n    imputer_num = SimpleImputer(missing_values = np.nan, strategy = strategy)\n    \n    #fitting\n    imputer_num.fit(X_train_num)\n\n    # transform\n    imputed_data = imputer_num.transform(X_train_num)\n    X_train_num_imputed = pd.DataFrame(imputed_data)\n\n    #pastikan index dan nama kolom antara imputed dan non-imputed SAMA\n    X_train_num_imputed.columns = X_train_num.columns\n    X_train_num_imputed.index = X_train_num.index\n\n    return X_train_num_imputed, imputer_num\n```\n:::\n\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\nX_train_num, imputer_num = numericalImputation(X_train_num, strategy='most_frequent')\nX_train_num.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\ncompletion_year    0\nrooms              0\nparking            0\nbathroom           0\nsize_sqft          0\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\nimputer_num\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n#### Categorical Data\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\nX_train_cat = X_train.select_dtypes(include='object')\nX_train_cat\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8649</th>\n      <td>Maju</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9112</th>\n      <td>Bangsar</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>1472</th>\n      <td>Jalil</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>5536</th>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>8152</th>\n      <td>Pudu</td>\n      <td>Apartment</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7541</th>\n      <td>Ampang</td>\n      <td>Apartment</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7927</th>\n      <td>South</td>\n      <td>Flat</td>\n      <td>Not Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5340</th>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>1369</th>\n      <td>KLCC</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>3659</th>\n      <td>Road</td>\n      <td>Service Residence</td>\n      <td>Partially Furnished</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>7825 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\nX_train_cat.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\nlocation              0\nproperty_type         0\nfurnished             0\nnearby_railways    2206\ndtype: int64\n```\n:::\n:::\n\n\n-   Impute with mode\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\nX_train_cat, imputer_num = numericalImputation(X_train_cat, strategy='most_frequent')\nX_train_cat.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\nlocation           0\nproperty_type      0\nfurnished          0\nnearby_railways    0\ndtype: int64\n```\n:::\n:::\n\n\n#### Preprocessing Categorical Variable\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\nX_train_cat_ohe =  pd.get_dummies(X_train_cat)\nX_train_cat_ohe.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location_Ampang</th>\n      <th>location_Bangsar</th>\n      <th>location_Besi</th>\n      <th>location_Bintang</th>\n      <th>location_Brickfields</th>\n      <th>location_Centre</th>\n      <th>location_Cheras</th>\n      <th>location_City</th>\n      <th>location_Damansara</th>\n      <th>location_Desa</th>\n      <th>...</th>\n      <th>property_type_Duplex</th>\n      <th>property_type_Flat</th>\n      <th>property_type_Others</th>\n      <th>property_type_Service Residence</th>\n      <th>property_type_Studio</th>\n      <th>furnished_Fully Furnished</th>\n      <th>furnished_Not Furnished</th>\n      <th>furnished_Partially Furnished</th>\n      <th>nearby_railways_no</th>\n      <th>nearby_railways_yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8649</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9112</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 58 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\nohe_columns = X_train_cat_ohe.columns\nohe_columns\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\nIndex(['location_Ampang', 'location_Bangsar', 'location_Besi',\n       'location_Bintang', 'location_Brickfields', 'location_Centre',\n       'location_Cheras', 'location_City', 'location_Damansara',\n       'location_Desa', 'location_Dutamas', 'location_Gombak',\n       'location_Hartamas', 'location_Heights', 'location_Hilir',\n       'location_Indah', 'location_Ipoh', 'location_Ismail', 'location_Jalil',\n       'location_Jaya', 'location_KLCC', 'location_Kepong', 'location_Keramat',\n       'location_Kiara', 'location_Kuching', 'location_Lama', 'location_Maju',\n       'location_Melawati', 'location_Menjalara', 'location_OUG',\n       'location_Pandan', 'location_Pantai', 'location_ParkCity',\n       'location_Perdana', 'location_Petaling', 'location_Puchong',\n       'location_Pudu', 'location_Road', 'location_Segambut',\n       'location_Selatan', 'location_Sentul', 'location_Seputeh',\n       'location_Setapak', 'location_Setiawangsa', 'location_South',\n       'location_Titiwangsa', 'property_type_Apartment',\n       'property_type_Condominium', 'property_type_Duplex',\n       'property_type_Flat', 'property_type_Others',\n       'property_type_Service Residence', 'property_type_Studio',\n       'furnished_Fully Furnished', 'furnished_Not Furnished',\n       'furnished_Partially Furnished', 'nearby_railways_no',\n       'nearby_railways_yes'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\nX_train_cat_ohe.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\nlocation_Ampang                    0\nlocation_Bangsar                   0\nlocation_Besi                      0\nlocation_Bintang                   0\nlocation_Brickfields               0\nlocation_Centre                    0\nlocation_Cheras                    0\nlocation_City                      0\nlocation_Damansara                 0\nlocation_Desa                      0\nlocation_Dutamas                   0\nlocation_Gombak                    0\nlocation_Hartamas                  0\nlocation_Heights                   0\nlocation_Hilir                     0\nlocation_Indah                     0\nlocation_Ipoh                      0\nlocation_Ismail                    0\nlocation_Jalil                     0\nlocation_Jaya                      0\nlocation_KLCC                      0\nlocation_Kepong                    0\nlocation_Keramat                   0\nlocation_Kiara                     0\nlocation_Kuching                   0\nlocation_Lama                      0\nlocation_Maju                      0\nlocation_Melawati                  0\nlocation_Menjalara                 0\nlocation_OUG                       0\nlocation_Pandan                    0\nlocation_Pantai                    0\nlocation_ParkCity                  0\nlocation_Perdana                   0\nlocation_Petaling                  0\nlocation_Puchong                   0\nlocation_Pudu                      0\nlocation_Road                      0\nlocation_Segambut                  0\nlocation_Selatan                   0\nlocation_Sentul                    0\nlocation_Seputeh                   0\nlocation_Setapak                   0\nlocation_Setiawangsa               0\nlocation_South                     0\nlocation_Titiwangsa                0\nproperty_type_Apartment            0\nproperty_type_Condominium          0\nproperty_type_Duplex               0\nproperty_type_Flat                 0\nproperty_type_Others               0\nproperty_type_Service Residence    0\nproperty_type_Studio               0\nfurnished_Fully Furnished          0\nfurnished_Not Furnished            0\nfurnished_Partially Furnished      0\nnearby_railways_no                 0\nnearby_railways_yes                0\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\nX_train_num.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\ncompletion_year    0\nrooms              0\nparking            0\nbathroom           0\nsize_sqft          0\ndtype: int64\n```\n:::\n:::\n\n\n#### Penggabungan Numerical dan Categorical data\n\n::: {.cell execution_count=72}\n``` {.python .cell-code}\nX_train_concat = pd.concat([X_train_num,\n                            X_train_cat_ohe],\n                           axis = 1)\n```\n:::\n\n\n::: {.cell execution_count=73}\n``` {.python .cell-code}\nX_train_concat.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>location_Ampang</th>\n      <th>location_Bangsar</th>\n      <th>location_Besi</th>\n      <th>location_Bintang</th>\n      <th>location_Brickfields</th>\n      <th>...</th>\n      <th>property_type_Duplex</th>\n      <th>property_type_Flat</th>\n      <th>property_type_Others</th>\n      <th>property_type_Service Residence</th>\n      <th>property_type_Studio</th>\n      <th>furnished_Fully Furnished</th>\n      <th>furnished_Not Furnished</th>\n      <th>furnished_Partially Furnished</th>\n      <th>nearby_railways_no</th>\n      <th>nearby_railways_yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8649</th>\n      <td>2021.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>800.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9112</th>\n      <td>1993.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>890.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 63 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=74}\n``` {.python .cell-code}\n#sanity check\nX_train_concat.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\ncompletion_year                  0\nrooms                            0\nparking                          0\nbathroom                         0\nsize_sqft                        0\n                                ..\nfurnished_Fully Furnished        0\nfurnished_Not Furnished          0\nfurnished_Partially Furnished    0\nnearby_railways_no               0\nnearby_railways_yes              0\nLength: 63, dtype: int64\n```\n:::\n:::\n\n\n#### Standarisasi\n\n::: {.cell execution_count=75}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler\n\n# Buat fungsi\ndef standardizerData(data):\n    \"\"\"\n    Fungsi untuk melakukan standarisasi data\n    :param data: <pandas dataframe> sampel data\n    :return standardized_data: <pandas dataframe> sampel data standard\n    :return standardizer: method untuk standardisasi data\n    \"\"\"\n    data_columns = data.columns  # agar nama kolom tidak hilang\n    data_index = data.index  # agar index tidak hilang\n\n    # buat (fit) standardizer\n    standardizer = StandardScaler()\n    standardizer.fit(data)\n\n    # transform data\n    standardized_data_raw = standardizer.transform(data)\n    standardized_data = pd.DataFrame(standardized_data_raw)\n    standardized_data.columns = data_columns\n    standardized_data.index = data_index\n\n    return standardized_data, standardizer\n```\n:::\n\n\n::: {.cell execution_count=76}\n``` {.python .cell-code}\nX_train_clean, standardizer = standardizerData(data = X_train_concat)\n```\n:::\n\n\n::: {.cell execution_count=77}\n``` {.python .cell-code}\nX_train_clean.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>location_Ampang</th>\n      <th>location_Bangsar</th>\n      <th>location_Besi</th>\n      <th>location_Bintang</th>\n      <th>location_Brickfields</th>\n      <th>...</th>\n      <th>property_type_Duplex</th>\n      <th>property_type_Flat</th>\n      <th>property_type_Others</th>\n      <th>property_type_Service Residence</th>\n      <th>property_type_Studio</th>\n      <th>furnished_Fully Furnished</th>\n      <th>furnished_Not Furnished</th>\n      <th>furnished_Partially Furnished</th>\n      <th>nearby_railways_no</th>\n      <th>nearby_railways_yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>8649</th>\n      <td>0.541336</td>\n      <td>-0.971807</td>\n      <td>-0.542258</td>\n      <td>-1.813058</td>\n      <td>-0.530030</td>\n      <td>-0.189407</td>\n      <td>-0.068927</td>\n      <td>-0.137405</td>\n      <td>-0.102909</td>\n      <td>-0.048017</td>\n      <td>...</td>\n      <td>-0.050621</td>\n      <td>-0.167279</td>\n      <td>-0.049336</td>\n      <td>-0.60979</td>\n      <td>-0.053098</td>\n      <td>1.072803</td>\n      <td>-0.406146</td>\n      <td>-0.805454</td>\n      <td>-0.619460</td>\n      <td>0.619460</td>\n    </tr>\n    <tr>\n      <th>9112</th>\n      <td>-3.913712</td>\n      <td>-0.971807</td>\n      <td>-0.542258</td>\n      <td>-1.813058</td>\n      <td>-0.190258</td>\n      <td>-0.189407</td>\n      <td>14.508152</td>\n      <td>-0.137405</td>\n      <td>-0.102909</td>\n      <td>-0.048017</td>\n      <td>...</td>\n      <td>-0.050621</td>\n      <td>-0.167279</td>\n      <td>-0.049336</td>\n      <td>-0.60979</td>\n      <td>-0.053098</td>\n      <td>1.072803</td>\n      <td>-0.406146</td>\n      <td>-0.805454</td>\n      <td>-0.619460</td>\n      <td>0.619460</td>\n    </tr>\n    <tr>\n      <th>1472</th>\n      <td>0.541336</td>\n      <td>-2.288585</td>\n      <td>-0.542258</td>\n      <td>-1.813058</td>\n      <td>0.980069</td>\n      <td>-0.189407</td>\n      <td>-0.068927</td>\n      <td>-0.137405</td>\n      <td>-0.102909</td>\n      <td>-0.048017</td>\n      <td>...</td>\n      <td>-0.050621</td>\n      <td>-0.167279</td>\n      <td>-0.049336</td>\n      <td>-0.60979</td>\n      <td>-0.053098</td>\n      <td>1.072803</td>\n      <td>-0.406146</td>\n      <td>-0.805454</td>\n      <td>-0.619460</td>\n      <td>0.619460</td>\n    </tr>\n    <tr>\n      <th>5536</th>\n      <td>0.541336</td>\n      <td>0.344970</td>\n      <td>1.685126</td>\n      <td>0.150837</td>\n      <td>-0.178932</td>\n      <td>-0.189407</td>\n      <td>-0.068927</td>\n      <td>-0.137405</td>\n      <td>-0.102909</td>\n      <td>-0.048017</td>\n      <td>...</td>\n      <td>-0.050621</td>\n      <td>-0.167279</td>\n      <td>-0.049336</td>\n      <td>-0.60979</td>\n      <td>-0.053098</td>\n      <td>1.072803</td>\n      <td>-0.406146</td>\n      <td>-0.805454</td>\n      <td>1.614308</td>\n      <td>-1.614308</td>\n    </tr>\n    <tr>\n      <th>8152</th>\n      <td>0.541336</td>\n      <td>0.344970</td>\n      <td>-0.542258</td>\n      <td>0.150837</td>\n      <td>0.149515</td>\n      <td>-0.189407</td>\n      <td>-0.068927</td>\n      <td>-0.137405</td>\n      <td>-0.102909</td>\n      <td>-0.048017</td>\n      <td>...</td>\n      <td>-0.050621</td>\n      <td>-0.167279</td>\n      <td>-0.049336</td>\n      <td>-0.60979</td>\n      <td>-0.053098</td>\n      <td>-0.932137</td>\n      <td>-0.406146</td>\n      <td>1.241535</td>\n      <td>-0.619460</td>\n      <td>0.619460</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 63 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Training Machine Learning\n\nSince this is a regression model, R2 score and mean absolute error (MAE) will be used as a performance metrics.\n\nThe machine learning model will use baseline from average value of the target columns (monthly rent) and also result from linear regression model. After that, author used some of the recommended model based on previous works, which are random forest and gradient boosting to better improve the performance of the model.\n\n#### Baseline-Average Value\n\nThe concept here is to use average value of the target as the easiest way to predict the monhtly rent of a unit.\n\n::: {.cell execution_count=78}\n``` {.python .cell-code}\ny_baseline = np.ones(len(y_train)) * y_train.mean()\ny_baseline\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\narray([1780.0086901, 1780.0086901, 1780.0086901, ..., 1780.0086901,\n       1780.0086901, 1780.0086901])\n```\n:::\n:::\n\n\n::: {.cell execution_count=79}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n\n# Train the linear regression model\nlin_reg = LinearRegression().fit(X_train_clean, y_train)\n\n# Predict using the train data\ny_pred_train = y_baseline\n\n# Calculate R-squared\nr2_baseline = r2_score(y_train, y_pred_train)\n\n#calculate MAE\nmae_baseline = mean_absolute_error(y_train, y_pred_train)\n\nprint(f\"R2-score: {r2_baseline:.4f} and MAE score: {mae_baseline:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.0000 and MAE score: 562.3710\n```\n:::\n:::\n\n\n::: {.cell execution_count=80}\n``` {.python .cell-code}\nplt.scatter(x=y_train, y=y_pred_train);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-81-output-1.png){width=583 height=411}\n:::\n:::\n\n\n#### Baseline-Linear Regression\n\nThe second method is using linear regression, which simply put is finding the minum total error (distance) between predicted value and the target value, using linear equation. \n\n::: {.cell execution_count=81}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# Train the linear regression model\nlin_reg = LinearRegression().fit(X_train_clean, y_train)\n\n# Predict using the train data\n# y_pred = y_baseline\ny_pred_train = lin_reg.predict(X_train_clean)\n\n# Calculate mean absolute error\nmae_linreg = mean_absolute_error(y_train, y_pred_train)\n\n# Calculate R-squared\nr2_linreg = r2_score(y_train, y_pred_train)\n\nprint(f\"R2-score: {r2_linreg:.4f} and MAE score: {mae_linreg:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.6468 and MAE score: 319.2229\n```\n:::\n:::\n\n\n::: {.cell execution_count=82}\n``` {.python .cell-code}\nsns.jointplot(x=y_train, y=y_pred_train);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-83-output-1.png){width=579 height=564}\n:::\n:::\n\n\n#### GradientBoosting\n\nThe gradient boosting, is one of the recommendation from previous works, is a model where each sample would be given a different weights (boosts) depending on its performance in predicting the value/ target. \n\n::: {.cell execution_count=83}\n``` {.python .cell-code}\nfrom sklearn.ensemble import GradientBoostingRegressor\n# Build random forest\ngrad_tree = GradientBoostingRegressor(random_state = 123)\n```\n:::\n\n\n::: {.cell execution_count=84}\n``` {.python .cell-code}\n# Fit random forest\ngrad_tree.fit(X_train_clean, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=84}\n```{=html}\n<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor(random_state=123)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=123)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=85}\n``` {.python .cell-code}\n# Predict\ny_pred_train = grad_tree.predict(X_train_clean)\n# y_pred_test = grad_tree.predict(X_test_clean)\n\n# Calculate mean absolute error\nmae_gb = mean_absolute_error(y_train, y_pred_train)\n\n# Calculate R-squared\nr2_gb = r2_score(y_train, y_pred_train)\n\nprint(f\"R2-score: {r2_gb:.4f} and MAE score: {mae_gb:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.7246 and MAE score: 281.6835\n```\n:::\n:::\n\n\n::: {.cell execution_count=86}\n``` {.python .cell-code}\nsns.jointplot(x=y_train, y=y_pred_train);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-87-output-1.png){width=579 height=564}\n:::\n:::\n\n\n::: {.cell execution_count=87}\n``` {.python .cell-code}\n#gridsearch\n\nfrom sklearn.model_selection import GridSearchCV \n\n\nparams = {'n_estimators': [100, 200, 300, 400, 500],\n              'learning_rate': [0.1, 0.05, 0.01]}\n\n# Buat gridsearch\ngrad_tree = GradientBoostingRegressor(random_state = 123)\n\ngrad_tree_cv = GridSearchCV(estimator = grad_tree,\n                           param_grid = params,\n                           cv = 5,\n                           scoring = \"neg_mean_absolute_error\")\n```\n:::\n\n\n::: {.cell execution_count=88}\n``` {.python .cell-code}\n# Fit grid search cv\ngrad_tree_cv.fit(X_train_clean, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=88}\n```{=html}\n<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=GradientBoostingRegressor(random_state=123),\n             param_grid={&#x27;learning_rate&#x27;: [0.1, 0.05, 0.01],\n                         &#x27;n_estimators&#x27;: [100, 200, 300, 400, 500]},\n             scoring=&#x27;neg_mean_absolute_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=GradientBoostingRegressor(random_state=123),\n             param_grid={&#x27;learning_rate&#x27;: [0.1, 0.05, 0.01],\n                         &#x27;n_estimators&#x27;: [100, 200, 300, 400, 500]},\n             scoring=&#x27;neg_mean_absolute_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=123)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=123)</pre></div></div></div></div></div></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=89}\n``` {.python .cell-code}\n# Best params\ngrad_tree_cv.best_params_\n```\n\n::: {.cell-output .cell-output-display execution_count=89}\n```\n{'learning_rate': 0.1, 'n_estimators': 500}\n```\n:::\n:::\n\n\n::: {.cell execution_count=90}\n``` {.python .cell-code}\n# Refit the Adaboost\ngrad_tree = GradientBoostingRegressor(n_estimators = grad_tree_cv.best_params_[\"n_estimators\"],\n                                      random_state = 123)\n\ngrad_tree.fit(X_train_clean, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=90}\n```{=html}\n<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor(n_estimators=500, random_state=123)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(n_estimators=500, random_state=123)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=91}\n``` {.python .cell-code}\n# Predict\ny_pred_train = grad_tree.predict(X_train_clean)\n\n# Calculate mean absolute error\nmae_gb_cv = mean_absolute_error(y_train, y_pred_train)\n\n# Calculate R-squared\nr2_gb_cv = r2_score(y_train, y_pred_train)\n\nprint(f\"R2-score: {r2_gb_cv:.4f} and MAE score: {mae_gb_cv:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.8194 and MAE score: 228.0225\n```\n:::\n:::\n\n\n::: {.cell execution_count=92}\n``` {.python .cell-code}\nsns.jointplot(x=y_train, y=y_pred_train);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-93-output-1.png){width=579 height=564}\n:::\n:::\n\n\n#### Random Forest\n\nThe last model, which was also recommended by previous works, is a model where not only it has weights based on its performance, but the feature selection in which the sample is measured was done at **random**. Therefore, reduces not only the variance, but also the bias. \n\n::: {.cell execution_count=93}\n``` {.python .cell-code}\nfrom sklearn.ensemble import RandomForestRegressor\n```\n:::\n\n\n::: {.cell execution_count=94}\n``` {.python .cell-code}\n# Build random forest\nrf_tree = RandomForestRegressor(n_estimators = 100,\n                                criterion = \"squared_error\",\n                                max_features = \"sqrt\",\n                                random_state = 123)\n```\n:::\n\n\n::: {.cell execution_count=95}\n``` {.python .cell-code}\n# Fit random forest\nrf_tree.fit(X_train_clean, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```{=html}\n<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_features=&#x27;sqrt&#x27;, random_state=123)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_features=&#x27;sqrt&#x27;, random_state=123)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=96}\n``` {.python .cell-code}\n# Predict\ny_pred_train = rf_tree.predict(X_train_clean)\n\n# Calculate mean absolute error\nmae_rf = mean_absolute_error(y_train, y_pred_train)\n\n# Calculate R-squared\nr2_rf = r2_score(y_train, y_pred_train)\n\nprint(f\"R2-score: {r2_rf:.4f} and MAE score: {mae_rf:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.9577 and MAE score: 100.8408\n```\n:::\n:::\n\n\n::: {.cell execution_count=97}\n``` {.python .cell-code}\nsns.jointplot(x=y_train, y=y_pred_train);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-98-output-1.png){width=579 height=564}\n:::\n:::\n\n\n::: {.cell execution_count=98}\n``` {.python .cell-code}\nparams = {\"n_estimators\": [100, 200, 300, 500 ],\n          \"max_features\": [\"sqrt\", \"log2\"]}\n\n# Buat gridsearch\nrf_tree = RandomForestRegressor(criterion = \"squared_error\",\n                                random_state = 123)\n\nrf_tree_cv = GridSearchCV(estimator = rf_tree,\n                          param_grid = params,\n                          cv = 5,\n                          scoring = \"neg_mean_absolute_error\")\n```\n:::\n\n\n::: {.cell execution_count=99}\n``` {.python .cell-code}\n# Fit grid search cv\nrf_tree_cv.fit(X_train_clean, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```{=html}\n<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=123),\n             param_grid={&#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n                         &#x27;n_estimators&#x27;: [100, 200, 300, 500]},\n             scoring=&#x27;neg_mean_absolute_error&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=123),\n             param_grid={&#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n                         &#x27;n_estimators&#x27;: [100, 200, 300, 500]},\n             scoring=&#x27;neg_mean_absolute_error&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=123)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=123)</pre></div></div></div></div></div></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=100}\n``` {.python .cell-code}\n# Best params\nrf_tree_cv.best_params_\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\n{'max_features': 'sqrt', 'n_estimators': 500}\n```\n:::\n:::\n\n\n::: {.cell execution_count=101}\n``` {.python .cell-code}\n# Refit the Random Forest\nrf_tree = RandomForestRegressor(criterion = \"squared_error\",\n                                max_features = rf_tree_cv.best_params_[\"max_features\"],\n                                n_estimators = rf_tree_cv.best_params_[\"n_estimators\"],\n                                random_state = 123)\n\nrf_tree.fit(X_train_clean, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```{=html}\n<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_features=&#x27;sqrt&#x27;, n_estimators=500, random_state=123)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_features=&#x27;sqrt&#x27;, n_estimators=500, random_state=123)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=102}\n``` {.python .cell-code}\n# Predict\ny_pred_train = rf_tree.predict(X_train_clean)\n\n# Calculate mean absolute error\nmae_rf_cv = mean_absolute_error(y_train, y_pred_train)\n\n# # Calculate R-squared\nr2_rf_cv = r2_score(y_train, y_pred_train)\n\nprint(f\"R2-score: {r2_rf_cv:.4f} and MAE score: {mae_rf_cv:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.9585 and MAE score: 99.7989\n```\n:::\n:::\n\n\n::: {.cell execution_count=103}\n``` {.python .cell-code}\nsns.jointplot(x=y_train, y=y_pred_train);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-104-output-1.png){width=579 height=564}\n:::\n:::\n\n\n::: {.cell execution_count=104}\n``` {.python .cell-code}\nmae_score = [mae_baseline, mae_linreg, mae_gb, mae_gb_cv, mae_rf, mae_rf_cv]\nr2_score = [r2_baseline, r2_linreg, r2_gb, r2_gb_cv, r2_rf, r2_rf_cv]\nindexes = [\"baseline\", \"linear regression\", \"gradient boosting\", \"gradient boosting with CV\", \"random forest\",  \"random forest with CV\"]\n\nsummary_df = pd.DataFrame({\n    \"MAE Train\": mae_score,\n    \"R2-Score\": r2_score,\n},index = indexes)\n\nsummary_df.sort_values(by='R2-Score', ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MAE Train</th>\n      <th>R2-Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>random forest with CV</th>\n      <td>99.798879</td>\n      <td>0.958519</td>\n    </tr>\n    <tr>\n      <th>random forest</th>\n      <td>100.840759</td>\n      <td>0.957661</td>\n    </tr>\n    <tr>\n      <th>gradient boosting with CV</th>\n      <td>228.022510</td>\n      <td>0.819416</td>\n    </tr>\n    <tr>\n      <th>gradient boosting</th>\n      <td>281.683477</td>\n      <td>0.724601</td>\n    </tr>\n    <tr>\n      <th>linear regression</th>\n      <td>319.222873</td>\n      <td>0.646780</td>\n    </tr>\n    <tr>\n      <th>baseline</th>\n      <td>562.370983</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFrom the above table, it can be seen that Random Forest model performs the best, and Gradient Boosting at the second place. This is similar to the previous work done by others, on house pricing.\n\n### Best Model\n\n::: {.cell execution_count=105}\n``` {.python .cell-code}\n# libraries\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\n#setting up\nrf_tree = RandomForestRegressor(n_estimators = 500,\n                                criterion = \"squared_error\",\n                                max_features = \"sqrt\",\n                                random_state = 123)\n\n#fit model train\nrf_tree.fit(X_train_clean, y_train)\n\n# Predict model train\ny_pred_train = rf_tree.predict(X_train_clean)\n\n# Calculate mean absolute error\nmae_rf_cv_train = mean_absolute_error(y_train, y_pred_train)\n\n# # Calculate R-squared\nr2_rf_cv_train = r2_score(y_train, y_pred_train)\n\nprint(f\"R2-score: {r2_rf_cv_train:.3f} and MAE score: +/-{mae_rf_cv_train:.2f} RM\")\n\nsns.scatterplot(x=y_train, y=y_pred_train )\nplt.plot([0, 5500], [0,5500], \"--r\")\nplt.xlim(0, 5500)\nplt.xlabel(\"Actual Monthly Rent\")\nplt.ylim(0,5500)\nplt.ylabel(\"Predicted Monthly Rent\")\nplt.suptitle(\"Random Forest - Best Regression Model\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.959 and MAE score: +/-99.80 RM\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-106-output-2.png){width=602 height=477}\n:::\n:::\n\n\n## Data Prediction\n\n### Test Data Preprocessing\n\nSimlar process done in train dataset need to be repeated on test dataset.\n\n::: {.cell execution_count=106}\n``` {.python .cell-code}\n#checking null data\nX_test.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=106}\n```\ncompletion_year    834\nlocation             0\nproperty_type        0\nrooms                0\nparking            506\nbathroom             0\nsize_sqft            0\nfurnished            0\nnearby_railways    552\ndtype: int64\n```\n:::\n:::\n\n\n#### Numerical Data\n\n::: {.cell execution_count=107}\n``` {.python .cell-code}\nX_test_num =  X_test.select_dtypes(exclude='object')\nX_test_num\n```\n\n::: {.cell-output .cell-output-display execution_count=107}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>324</th>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>1097</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>2011.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1200</td>\n    </tr>\n    <tr>\n      <th>1863</th>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>560</td>\n    </tr>\n    <tr>\n      <th>2443</th>\n      <td>2021.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1200</td>\n    </tr>\n    <tr>\n      <th>9218</th>\n      <td>2023.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>300</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7510</th>\n      <td>2008.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1204</td>\n    </tr>\n    <tr>\n      <th>928</th>\n      <td>2013.0</td>\n      <td>1.0</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>350</td>\n    </tr>\n    <tr>\n      <th>2181</th>\n      <td>2019.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th>4065</th>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>600</td>\n    </tr>\n    <tr>\n      <th>9041</th>\n      <td>2021.0</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>800</td>\n    </tr>\n  </tbody>\n</table>\n<p>1957 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=108}\n``` {.python .cell-code}\nX_test_num.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=108}\n```\ncompletion_year    834\nrooms                0\nparking            506\nbathroom             0\nsize_sqft            0\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=109}\n``` {.python .cell-code}\nX_test_num, imputer_num = numericalImputation(X_test_num, strategy='most_frequent')\nX_test_num.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=109}\n```\ncompletion_year    0\nrooms              0\nparking            0\nbathroom           0\nsize_sqft          0\ndtype: int64\n```\n:::\n:::\n\n\n#### Categorical Data\n\n::: {.cell execution_count=110}\n``` {.python .cell-code}\nX_test_cat = X_test.select_dtypes(include='object')\nX_test_cat\n```\n\n::: {.cell-output .cell-output-display execution_count=110}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>property_type</th>\n      <th>furnished</th>\n      <th>nearby_railways</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>324</th>\n      <td>South</td>\n      <td>Condominium</td>\n      <td>Partially Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>KLCC</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1863</th>\n      <td>Maju</td>\n      <td>Flat</td>\n      <td>Not Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2443</th>\n      <td>Lama</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>9218</th>\n      <td>Cheras</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7510</th>\n      <td>Setiawangsa</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>928</th>\n      <td>Road</td>\n      <td>Condominium</td>\n      <td>Fully Furnished</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2181</th>\n      <td>Segambut</td>\n      <td>Service Residence</td>\n      <td>Fully Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>4065</th>\n      <td>Lama</td>\n      <td>Apartment</td>\n      <td>Not Furnished</td>\n      <td>no</td>\n    </tr>\n    <tr>\n      <th>9041</th>\n      <td>Setapak</td>\n      <td>Condominium</td>\n      <td>Partially Furnished</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n<p>1957 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=111}\n``` {.python .cell-code}\nX_test_cat.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=111}\n```\nlocation             0\nproperty_type        0\nfurnished            0\nnearby_railways    552\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=112}\n``` {.python .cell-code}\nX_test_cat, imputer_num = numericalImputation(X_test_cat, strategy='most_frequent')\nX_test_cat.isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=112}\n```\nlocation           0\nproperty_type      0\nfurnished          0\nnearby_railways    0\ndtype: int64\n```\n:::\n:::\n\n\n#### Categorical OHE\n\n::: {.cell execution_count=113}\n``` {.python .cell-code}\nX_test_cat_ohe =  pd.get_dummies(X_test_cat)\nX_test_cat_ohe.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=113}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location_Ampang</th>\n      <th>location_Bangsar</th>\n      <th>location_Besi</th>\n      <th>location_Bintang</th>\n      <th>location_Brickfields</th>\n      <th>location_Centre</th>\n      <th>location_Cheras</th>\n      <th>location_City</th>\n      <th>location_Damansara</th>\n      <th>location_Desa</th>\n      <th>...</th>\n      <th>property_type_Duplex</th>\n      <th>property_type_Flat</th>\n      <th>property_type_Others</th>\n      <th>property_type_Service Residence</th>\n      <th>property_type_Studio</th>\n      <th>furnished_Fully Furnished</th>\n      <th>furnished_Not Furnished</th>\n      <th>furnished_Partially Furnished</th>\n      <th>nearby_railways_no</th>\n      <th>nearby_railways_yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>324</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 58 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=114}\n``` {.python .cell-code}\nohe_columns = X_test_cat_ohe.columns\nohe_columns\n```\n\n::: {.cell-output .cell-output-display execution_count=114}\n```\nIndex(['location_Ampang', 'location_Bangsar', 'location_Besi',\n       'location_Bintang', 'location_Brickfields', 'location_Centre',\n       'location_Cheras', 'location_City', 'location_Damansara',\n       'location_Desa', 'location_Dutamas', 'location_Gombak',\n       'location_Hartamas', 'location_Heights', 'location_Hilir',\n       'location_Indah', 'location_Ipoh', 'location_Ismail', 'location_Jalil',\n       'location_Jaya', 'location_KLCC', 'location_Kepong', 'location_Keramat',\n       'location_Kiara', 'location_Kuching', 'location_Lama', 'location_Maju',\n       'location_Melawati', 'location_Menjalara', 'location_OUG',\n       'location_Pandan', 'location_Pantai', 'location_ParkCity',\n       'location_Perdana', 'location_Petaling', 'location_Puchong',\n       'location_Pudu', 'location_Road', 'location_Segambut',\n       'location_Selatan', 'location_Sentul', 'location_Seputeh',\n       'location_Setapak', 'location_Setiawangsa', 'location_South',\n       'location_Titiwangsa', 'property_type_Apartment',\n       'property_type_Condominium', 'property_type_Duplex',\n       'property_type_Flat', 'property_type_Others',\n       'property_type_Service Residence', 'property_type_Studio',\n       'furnished_Fully Furnished', 'furnished_Not Furnished',\n       'furnished_Partially Furnished', 'nearby_railways_no',\n       'nearby_railways_yes'],\n      dtype='object')\n```\n:::\n:::\n\n\n### Penggabungan Numerical dan Categorical data\n\n::: {.cell execution_count=115}\n``` {.python .cell-code}\nX_test_concat = pd.concat([X_test_num,\n                            X_test_cat_ohe],\n                           axis = 1)\n```\n:::\n\n\n::: {.cell execution_count=116}\n``` {.python .cell-code}\nX_test_concat.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=116}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>location_Ampang</th>\n      <th>location_Bangsar</th>\n      <th>location_Besi</th>\n      <th>location_Bintang</th>\n      <th>location_Brickfields</th>\n      <th>...</th>\n      <th>property_type_Duplex</th>\n      <th>property_type_Flat</th>\n      <th>property_type_Others</th>\n      <th>property_type_Service Residence</th>\n      <th>property_type_Studio</th>\n      <th>furnished_Fully Furnished</th>\n      <th>furnished_Not Furnished</th>\n      <th>furnished_Partially Furnished</th>\n      <th>nearby_railways_no</th>\n      <th>nearby_railways_yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>324</th>\n      <td>2021.0</td>\n      <td>3.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1097.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>2011.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>1200.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 63 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=117}\n``` {.python .cell-code}\n#sanity check\nX_test_concat.isnull().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\ncompletion_year                  0\nrooms                            0\nparking                          0\nbathroom                         0\nsize_sqft                        0\n                                ..\nfurnished_Fully Furnished        0\nfurnished_Not Furnished          0\nfurnished_Partially Furnished    0\nnearby_railways_no               0\nnearby_railways_yes              0\nLength: 63, dtype: int64\n```\n:::\n:::\n\n\n#### Standarisasi\n\n::: {.cell execution_count=118}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler\n\n# Buat fungsi\ndef standardizerData(data):\n    \"\"\"\n    Fungsi untuk melakukan standarisasi data\n    :param data: <pandas dataframe> sampel data\n    :return standardized_data: <pandas dataframe> sampel data standard\n    :return standardizer: method untuk standardisasi data\n    \"\"\"\n    data_columns = data.columns  # agar nama kolom tidak hilang\n    data_index = data.index  # agar index tidak hilang\n\n    # buat (fit) standardizer\n    standardizer = StandardScaler()\n    standardizer.fit(data)\n\n    # transform data\n    standardized_data_raw = standardizer.transform(data)\n    standardized_data = pd.DataFrame(standardized_data_raw)\n    standardized_data.columns = data_columns\n    standardized_data.index = data_index\n\n    return standardized_data, standardizer\n```\n:::\n\n\n::: {.cell execution_count=119}\n``` {.python .cell-code}\nX_test_clean, standardizer = standardizerData(data = X_test_concat)\n```\n:::\n\n\n::: {.cell execution_count=120}\n``` {.python .cell-code}\nX_test_clean.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=120}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>completion_year</th>\n      <th>rooms</th>\n      <th>parking</th>\n      <th>bathroom</th>\n      <th>size_sqft</th>\n      <th>location_Ampang</th>\n      <th>location_Bangsar</th>\n      <th>location_Besi</th>\n      <th>location_Bintang</th>\n      <th>location_Brickfields</th>\n      <th>...</th>\n      <th>property_type_Duplex</th>\n      <th>property_type_Flat</th>\n      <th>property_type_Others</th>\n      <th>property_type_Service Residence</th>\n      <th>property_type_Studio</th>\n      <th>furnished_Fully Furnished</th>\n      <th>furnished_Not Furnished</th>\n      <th>furnished_Partially Furnished</th>\n      <th>nearby_railways_no</th>\n      <th>nearby_railways_yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>324</th>\n      <td>0.552642</td>\n      <td>0.320875</td>\n      <td>-0.541910</td>\n      <td>0.124936</td>\n      <td>0.555078</td>\n      <td>-0.168453</td>\n      <td>-0.071667</td>\n      <td>-0.120479</td>\n      <td>-0.09361</td>\n      <td>-0.055456</td>\n      <td>...</td>\n      <td>-0.059914</td>\n      <td>-0.161923</td>\n      <td>-0.059914</td>\n      <td>-0.60234</td>\n      <td>-0.045256</td>\n      <td>-0.949656</td>\n      <td>-0.368524</td>\n      <td>1.208981</td>\n      <td>1.563785</td>\n      <td>-1.563785</td>\n    </tr>\n    <tr>\n      <th>7209</th>\n      <td>-0.958283</td>\n      <td>1.620985</td>\n      <td>1.505421</td>\n      <td>2.112746</td>\n      <td>0.933643</td>\n      <td>-0.168453</td>\n      <td>-0.071667</td>\n      <td>-0.120479</td>\n      <td>-0.09361</td>\n      <td>-0.055456</td>\n      <td>...</td>\n      <td>-0.059914</td>\n      <td>-0.161923</td>\n      <td>-0.059914</td>\n      <td>-0.60234</td>\n      <td>-0.045256</td>\n      <td>1.053013</td>\n      <td>-0.368524</td>\n      <td>-0.827143</td>\n      <td>-0.639474</td>\n      <td>0.639474</td>\n    </tr>\n    <tr>\n      <th>1863</th>\n      <td>0.552642</td>\n      <td>-0.979234</td>\n      <td>-0.541910</td>\n      <td>-1.862873</td>\n      <td>-1.418602</td>\n      <td>-0.168453</td>\n      <td>-0.071667</td>\n      <td>-0.120479</td>\n      <td>-0.09361</td>\n      <td>-0.055456</td>\n      <td>...</td>\n      <td>-0.059914</td>\n      <td>6.175759</td>\n      <td>-0.059914</td>\n      <td>-0.60234</td>\n      <td>-0.045256</td>\n      <td>-0.949656</td>\n      <td>2.713531</td>\n      <td>-0.827143</td>\n      <td>-0.639474</td>\n      <td>0.639474</td>\n    </tr>\n    <tr>\n      <th>2443</th>\n      <td>0.552642</td>\n      <td>0.320875</td>\n      <td>-0.541910</td>\n      <td>0.124936</td>\n      <td>0.933643</td>\n      <td>-0.168453</td>\n      <td>-0.071667</td>\n      <td>-0.120479</td>\n      <td>-0.09361</td>\n      <td>-0.055456</td>\n      <td>...</td>\n      <td>-0.059914</td>\n      <td>-0.161923</td>\n      <td>-0.059914</td>\n      <td>-0.60234</td>\n      <td>-0.045256</td>\n      <td>1.053013</td>\n      <td>-0.368524</td>\n      <td>-0.827143</td>\n      <td>-0.639474</td>\n      <td>0.639474</td>\n    </tr>\n    <tr>\n      <th>9218</th>\n      <td>0.854826</td>\n      <td>-2.279344</td>\n      <td>1.505421</td>\n      <td>0.124936</td>\n      <td>-2.374201</td>\n      <td>-0.168453</td>\n      <td>-0.071667</td>\n      <td>-0.120479</td>\n      <td>-0.09361</td>\n      <td>-0.055456</td>\n      <td>...</td>\n      <td>-0.059914</td>\n      <td>-0.161923</td>\n      <td>-0.059914</td>\n      <td>-0.60234</td>\n      <td>-0.045256</td>\n      <td>1.053013</td>\n      <td>-0.368524</td>\n      <td>-0.827143</td>\n      <td>-0.639474</td>\n      <td>0.639474</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 63 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Test Data Result\n\n::: {.cell execution_count=121}\n``` {.python .cell-code}\n# libraries\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\n#setting up\nrf_tree = RandomForestRegressor(n_estimators = 500,\n                                criterion = \"squared_error\",\n                                max_features = \"sqrt\",\n                                random_state = 123)\n\n#fit model train\nrf_tree.fit(X_train_clean, y_train)\n\n# Predict model\ny_pred_test = rf_tree.predict(X_test_clean)\n\n# Calculate mean absolute error\nmae_rf_cv_test = mean_absolute_error(y_test, y_pred_test)\n\n# # Calculate R-squared\nr2_rf_cv_test = r2_score(y_test, y_pred_test)\n\nprint(f\"R2-score: {r2_rf_cv_test:.3f} and MAE score: +/-{mae_rf_cv_test:.2f} RM\")\n\nsns.scatterplot(x=y_test, y=y_pred_test )\nplt.plot([0, 5500], [0,5500], \"--r\")\nplt.xlim(0, 5500)\nplt.xlabel(\"Actual Monthly Rent\")\nplt.ylim(0,5500)\nplt.ylabel(\"Predicted Monthly Rent\")\nplt.suptitle(\"Random Forest - Best Regression Model\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR2-score: 0.803 and MAE score: +/-214.08 RM\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-122-output-2.png){width=602 height=477}\n:::\n:::\n\n\n::: {.cell execution_count=122}\n``` {.python .cell-code}\nmae_score = [mae_rf_cv_train, mae_rf_cv_test]\nr2_score = [r2_rf_cv_train, r2_rf_cv_test]\nindexes = [\"train\", \"test\"]\n\nsummary_df_train_test = pd.DataFrame({\n    \"MAE Train\": mae_score,\n    \"R2-Score\": r2_score,\n},index = indexes)\n\nsummary_df_train_test\n```\n\n::: {.cell-output .cell-output-display execution_count=122}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MAE Train</th>\n      <th>R2-Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>train</th>\n      <td>99.798879</td>\n      <td>0.958519</td>\n    </tr>\n    <tr>\n      <th>test</th>\n      <td>214.084111</td>\n      <td>0.802556</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Feature Importance\n\n::: {.cell execution_count=123}\n``` {.python .cell-code}\n# calculate the feature importances\nimportances = rf_tree.feature_importances_\n\n# rescale the importances back to the original scale of the features\nimportances = importances * X_train_clean.std()\n\n# sort the feature importances in descending order\nsorted_index = importances.argsort()[::-1]\n\n# print the feature importances\ndict_feature_importance = {}\nfor i in sorted_index:\n    # print(\"{}: {}\".format(X_train_clean.columns[i], importances[i]))\n    dict_feature_importance.update({X_train_clean.columns[i]: importances[i]})\n    \n# Create a DataFrame from the dictionary\ndf = pd.DataFrame.from_dict(dict_feature_importance, orient='index', columns=['values'])\n\n# Reset the index to become a column\ndf = df.reset_index()\n\n# Rename the columns\ndf.columns = ['feature', 'importance_value']\n\ndf.sort_values(by='importance_value', ascending=False).head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=123}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>importance_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>size_sqft</td>\n      <td>0.227595</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>furnished_Fully Furnished</td>\n      <td>0.106722</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>completion_year</td>\n      <td>0.073598</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bathroom</td>\n      <td>0.059699</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>rooms</td>\n      <td>0.046285</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>parking</td>\n      <td>0.045606</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>location_Kiara</td>\n      <td>0.042962</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>furnished_Not Furnished</td>\n      <td>0.040320</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>location_KLCC</td>\n      <td>0.037287</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>furnished_Partially Furnished</td>\n      <td>0.036137</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Results\n\n1.  Result indicates that the best model for prediction is Random Forest with hyperparameter tuning, scoring 95% on R2-score, and a shy 100 RM on MAE. This proves to be a good model since the test dataset gives a scoring of 80% on R2, and 240 RM on MAE.\n\n2.  There are some factors that author believed to be affecting the result/ performance of the model:\n\n    1.  Dropping missing value reduces the performance! Initial model uses half of the data (4-5k rows) and gives poorer performance on R2 and MAE. Imputation and keeping the number of rows close to the original dataset (9k rows) proves to be improving the model. Especially on test dataset.\n    2.  Feature selection importance can be seen on the last table, but initially the selection was based on paper and intuition of the author (author lives and work in KL, Malaysia for 5 years). Feature such as `completion_year` and `nearby_railways` are important in improving the model.\n    3.  Last but not least is the outlier identification. The best practice for me is using jointplot to see not only the distribution of the data in 2-dimension, but also in the third dimension (the density) of the data.\n\n3.  Some of the feature that were believed to be quite important even before doing the modeling is size, furnished and location. All three is available within the 10-most features affecting the modeling. As a context, location in KLCC is like Pondok Indah in South Jakarta. Location in Kiara is like BSD in South Tangerang.\n\n### Discussions\n\n1.  One of the feature that author thinks is significant but not appearing on the 10-best important feature is nearby_railways. This column is showing if a certain property has a close proximity to a railways (KTM/LRT). The issue is, half of the data is missing, hence the imputation. Author belives, the proximity to nearby railways line can be approximated using manhanttan distance of railways line to each property unit.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script src=\"https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js\" crossorigin=\"anonymous\"></script>\n"
      ],
      "include-after-body": [
        "<script type=application/vnd.jupyter.widget-state+json>\n{\"state\":{\"0439a9030c634c59ae237302f3d2e57d\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"077e8a69d31a487a934038c9cd0081dd\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"082591f760094a7f807889c698d2aef8\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"0bbbc847263a41a99f7839e5f2d94a3f\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"0ec10634f217438ea82bd00248ab619e\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_433e60ca6805460082ae51a48e619054\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_8bc663e576364141b303037b80e37954\",\"tabbable\":null,\"tooltip\":null,\"value\":\"100%\"}},\"0efe7c139b0e4a369356d683b9f5c3ae\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"106e1a8a21064134979efe12186f1df9\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_fcc6585500484b738e2a4410cef317e7\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_a29019614d1b4986ab0786d5b9db63ef\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 2/2 [00:02&lt;00:00,  1.48s/it]\"}},\"121e94184d6541f39efe57cc44d62111\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"1db65c2caab348e8bfac542b725b553e\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_28b017c369d54831a8f50b060072431c\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_121e94184d6541f39efe57cc44d62111\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 40/40 [00:16&lt;00:00,  3.36it/s]\"}},\"1f5f76247d654a1b9656740b642f9ca8\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_caa13ded31644b20bb725206a140e583\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_b7ad6431a1bc4bc5b0038d8f7bc5fa40\",\"tabbable\":null,\"tooltip\":null,\"value\":\"100%\"}},\"21c34494392241e4894c3efbf28bb278\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"28b017c369d54831a8f50b060072431c\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"2c14060e74654cb38a15f2634c4e2bfa\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_1f5f76247d654a1b9656740b642f9ca8\",\"IPY_MODEL_41432161ea5049b29688bcb9eb6de7f9\",\"IPY_MODEL_581efb0a759f43b4a4ed51221ac59701\"],\"layout\":\"IPY_MODEL_410cc78611074b8db9a96b1de92461ff\",\"tabbable\":null,\"tooltip\":null}},\"2fdecc88ed934311840a036755c51f2e\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"35653d6edde948dca498194edd03ef48\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"39b8f931809f43af9bbed5fa7ca0adb7\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"3c4d64d2fd484519ba5cf1cbe2a7a906\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"40cb9a2ac2c34189826ea304959de731\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"410cc78611074b8db9a96b1de92461ff\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"41432161ea5049b29688bcb9eb6de7f9\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_77a4596e9cbe4b7d90305d2fc5b4bd40\",\"max\":1,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_af5adac03987407c8c8ec451c98a3b1d\",\"tabbable\":null,\"tooltip\":null,\"value\":1}},\"41fd5b7727364771a0af3da13ac869d7\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_b6cd3c78d4704e6cacad221deb2f27b7\",\"IPY_MODEL_991eb7d3f0b1451f9f86b2fc2fe1e830\",\"IPY_MODEL_106e1a8a21064134979efe12186f1df9\"],\"layout\":\"IPY_MODEL_6da2459972a24c9a92d35a69a94b0ce6\",\"tabbable\":null,\"tooltip\":null}},\"4260582e8f8c4c45bfcb235db01903d3\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_3c4d64d2fd484519ba5cf1cbe2a7a906\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_082591f760094a7f807889c698d2aef8\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 40/40 [00:24&lt;00:00,  1.17it/s]\"}},\"433e60ca6805460082ae51a48e619054\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"4354af977a044f678832b2847105f24f\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_f7f6f14a1c1d49bb95802c63e7bc1ff2\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_35653d6edde948dca498194edd03ef48\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 40/40 [00:29&lt;00:00,  3.15it/s]\"}},\"43b373e993744967b2b6cff1425897c9\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"48c584390f0e47ff9ff403a4298bc78b\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"4de19b4805264b14bd02654571c22e01\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"581efb0a759f43b4a4ed51221ac59701\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_40cb9a2ac2c34189826ea304959de731\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_911f9588af5f41dca0e0987c18929cd9\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 1/1 [00:01&lt;00:00,  1.17s/it]\"}},\"5a6d44fee23643d4b7af127808dea6c2\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"5fc03952e8a14bfd89062e00a07e8035\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"6a630140398e4c87b74de7c292c638a4\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_af6922b836fb4dcd9faa09e87b66ff2a\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_c15bc6d2a8dc4a068e48898de5ec2a8b\",\"tabbable\":null,\"tooltip\":null,\"value\":\"100%\"}},\"6c2ae0399a9f4c36a6244f1fad5a91d5\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_43b373e993744967b2b6cff1425897c9\",\"max\":40,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_eb3654fb7dc94c5296acbf82c0c56d25\",\"tabbable\":null,\"tooltip\":null,\"value\":40}},\"6da2459972a24c9a92d35a69a94b0ce6\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"77a4596e9cbe4b7d90305d2fc5b4bd40\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"7966607f928b4f4b87ea222560be535b\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_c1c1291235e944128ea83fa3d6fb2540\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_902c0394fdf14f15ac02335c4e7a9741\",\"tabbable\":null,\"tooltip\":null,\"value\":\"100%\"}},\"84a74a6615984412a96005ba8ebd5980\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"892d2e3c97ed461b93e8d5d158d2b118\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_b3a89e5b58dd41859b53c4c1a0d1474f\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_0bbbc847263a41a99f7839e5f2d94a3f\",\"tabbable\":null,\"tooltip\":null,\"value\":\"100%\"}},\"8bc663e576364141b303037b80e37954\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"902c0394fdf14f15ac02335c4e7a9741\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"911f9588af5f41dca0e0987c18929cd9\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"95bd282e172c4123b6759cc7d9ac50a3\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"972ecc7483aa4a7dbdcb3770221fb46f\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"985a3d0925c740119a5ca65da770b61e\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_d3e4593d3e5b401594f44abe5c6b949f\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_21c34494392241e4894c3efbf28bb278\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 1/1 [00:05&lt;00:00,  5.19s/it]\"}},\"991eb7d3f0b1451f9f86b2fc2fe1e830\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_5fc03952e8a14bfd89062e00a07e8035\",\"max\":2,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_95bd282e172c4123b6759cc7d9ac50a3\",\"tabbable\":null,\"tooltip\":null,\"value\":2}},\"9d47e99a41c5465a817c6e9d488a854b\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_6a630140398e4c87b74de7c292c638a4\",\"IPY_MODEL_6c2ae0399a9f4c36a6244f1fad5a91d5\",\"IPY_MODEL_1db65c2caab348e8bfac542b725b553e\"],\"layout\":\"IPY_MODEL_ebe48da92f41437391305df6e03e28dc\",\"tabbable\":null,\"tooltip\":null}},\"9f404194d6da4b1d8d547a4c4ead1b70\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_48c584390f0e47ff9ff403a4298bc78b\",\"max\":1,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_2fdecc88ed934311840a036755c51f2e\",\"tabbable\":null,\"tooltip\":null,\"value\":1}},\"9f8bfa4f1ebe4ff5b89c907bda3ab43b\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"a29019614d1b4986ab0786d5b9db63ef\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"a6aea98c815e45a783973fd37c1de890\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_84a74a6615984412a96005ba8ebd5980\",\"max\":40,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_972ecc7483aa4a7dbdcb3770221fb46f\",\"tabbable\":null,\"tooltip\":null,\"value\":40}},\"af5adac03987407c8c8ec451c98a3b1d\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"af6922b836fb4dcd9faa09e87b66ff2a\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"b2f87a4869594099a2ae9a3a7113a7b3\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_5a6d44fee23643d4b7af127808dea6c2\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_d6d5dc56cc3141dbaea292927cb4c623\",\"tabbable\":null,\"tooltip\":null,\"value\":\" 1/1 [00:00&lt;00:00,  1.31it/s]\"}},\"b3a89e5b58dd41859b53c4c1a0d1474f\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"b6075f55b7df4b2fbc90a9a2579ace64\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_cd9888a2b13b4f4eac642520aeda82e0\",\"IPY_MODEL_9f404194d6da4b1d8d547a4c4ead1b70\",\"IPY_MODEL_b2f87a4869594099a2ae9a3a7113a7b3\"],\"layout\":\"IPY_MODEL_077e8a69d31a487a934038c9cd0081dd\",\"tabbable\":null,\"tooltip\":null}},\"b6cd3c78d4704e6cacad221deb2f27b7\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_d63601f91a50409a94e6c40b4876be5b\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_dca39822cfd44879bd4b81522e19ff9a\",\"tabbable\":null,\"tooltip\":null,\"value\":\"100%\"}},\"b7ad6431a1bc4bc5b0038d8f7bc5fa40\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"bc68757766094cd5beba630b63ef9fbb\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"bfcf746f8e344a318a55023f5af59ef4\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"c15bc6d2a8dc4a068e48898de5ec2a8b\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"c1c1291235e944128ea83fa3d6fb2540\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"c3cde3c1a0d542feacde3e81c37aad79\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_0ec10634f217438ea82bd00248ab619e\",\"IPY_MODEL_a6aea98c815e45a783973fd37c1de890\",\"IPY_MODEL_4260582e8f8c4c45bfcb235db01903d3\"],\"layout\":\"IPY_MODEL_4de19b4805264b14bd02654571c22e01\",\"tabbable\":null,\"tooltip\":null}},\"c592be0d774342fb811649282dc05388\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_7966607f928b4f4b87ea222560be535b\",\"IPY_MODEL_d5af0699ed1e4e25a0279e8aeb71084a\",\"IPY_MODEL_985a3d0925c740119a5ca65da770b61e\"],\"layout\":\"IPY_MODEL_0efe7c139b0e4a369356d683b9f5c3ae\",\"tabbable\":null,\"tooltip\":null}},\"caa13ded31644b20bb725206a140e583\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"cd9888a2b13b4f4eac642520aeda82e0\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HTMLView\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_9f8bfa4f1ebe4ff5b89c907bda3ab43b\",\"placeholder\":\"​\",\"style\":\"IPY_MODEL_bfcf746f8e344a318a55023f5af59ef4\",\"tabbable\":null,\"tooltip\":null,\"value\":\"100%\"}},\"d3e4593d3e5b401594f44abe5c6b949f\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"d5af0699ed1e4e25a0279e8aeb71084a\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_0439a9030c634c59ae237302f3d2e57d\",\"max\":1,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_fa78239e24024ccdb08039e168fecc48\",\"tabbable\":null,\"tooltip\":null,\"value\":1}},\"d63601f91a50409a94e6c40b4876be5b\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"d6d5dc56cc3141dbaea292927cb4c623\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"dca39822cfd44879bd4b81522e19ff9a\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HTMLStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HTMLStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"background\":null,\"description_width\":\"\",\"font_size\":null,\"text_color\":null}},\"dd3becea610f4f9fbe7873611ae1cfd5\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"FloatProgressModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"FloatProgressModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"ProgressView\",\"bar_style\":\"success\",\"description\":\"\",\"description_allow_html\":false,\"layout\":\"IPY_MODEL_e14279c2cb324bc3bd921d9abcaff661\",\"max\":40,\"min\":0,\"orientation\":\"horizontal\",\"style\":\"IPY_MODEL_39b8f931809f43af9bbed5fa7ca0adb7\",\"tabbable\":null,\"tooltip\":null,\"value\":40}},\"e14279c2cb324bc3bd921d9abcaff661\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"eb3654fb7dc94c5296acbf82c0c56d25\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"ebe48da92f41437391305df6e03e28dc\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"f7f6f14a1c1d49bb95802c63e7bc1ff2\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"fa78239e24024ccdb08039e168fecc48\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"ProgressStyleModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"ProgressStyleModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"StyleView\",\"bar_color\":null,\"description_width\":\"\"}},\"fcc6585500484b738e2a4410cef317e7\":{\"model_module\":\"@jupyter-widgets/base\",\"model_module_version\":\"2.0.0\",\"model_name\":\"LayoutModel\",\"state\":{\"_model_module\":\"@jupyter-widgets/base\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"LayoutModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/base\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"LayoutView\",\"align_content\":null,\"align_items\":null,\"align_self\":null,\"border_bottom\":null,\"border_left\":null,\"border_right\":null,\"border_top\":null,\"bottom\":null,\"display\":null,\"flex\":null,\"flex_flow\":null,\"grid_area\":null,\"grid_auto_columns\":null,\"grid_auto_flow\":null,\"grid_auto_rows\":null,\"grid_column\":null,\"grid_gap\":null,\"grid_row\":null,\"grid_template_areas\":null,\"grid_template_columns\":null,\"grid_template_rows\":null,\"height\":null,\"justify_content\":null,\"justify_items\":null,\"left\":null,\"margin\":null,\"max_height\":null,\"max_width\":null,\"min_height\":null,\"min_width\":null,\"object_fit\":null,\"object_position\":null,\"order\":null,\"overflow\":null,\"padding\":null,\"right\":null,\"top\":null,\"visibility\":null,\"width\":null}},\"fdee88b03feb46dbbec476b4a570b702\":{\"model_module\":\"@jupyter-widgets/controls\",\"model_module_version\":\"2.0.0\",\"model_name\":\"HBoxModel\",\"state\":{\"_dom_classes\":[],\"_model_module\":\"@jupyter-widgets/controls\",\"_model_module_version\":\"2.0.0\",\"_model_name\":\"HBoxModel\",\"_view_count\":null,\"_view_module\":\"@jupyter-widgets/controls\",\"_view_module_version\":\"2.0.0\",\"_view_name\":\"HBoxView\",\"box_style\":\"\",\"children\":[\"IPY_MODEL_892d2e3c97ed461b93e8d5d158d2b118\",\"IPY_MODEL_dd3becea610f4f9fbe7873611ae1cfd5\",\"IPY_MODEL_4354af977a044f678832b2847105f24f\"],\"layout\":\"IPY_MODEL_bc68757766094cd5beba630b63ef9fbb\",\"tabbable\":null,\"tooltip\":null}}},\"version_major\":2,\"version_minor\":0}\n</script>\n"
      ]
    }
  }
}